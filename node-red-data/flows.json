[{"id":"7e596646.ff51a8","type":"tab","label":"Sensors","disabled":false,"info":""},{"id":"e460325d.9cdbf","type":"tab","label":"Switches and buttons","disabled":false,"info":""},{"id":"8de34dec.0311b","type":"tab","label":"Raspberry PI","disabled":false,"info":""},{"id":"e85d4797.c0ff2","type":"tab","label":"Dev","disabled":false,"info":""},{"id":"e29f85d0.5a40a8","type":"mqtt-broker","z":"","name":"mqtt broker","broker":"192.168.0.4","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"bigTower/hi","birthQos":"0","birthPayload":"I am bigTower","closeTopic":"bigTower/bye","closeQos":"0","closePayload":"Bye-bye","willTopic":"bigTower/dying","willQos":"0","willPayload":"Arrgl"},{"id":"f818284.244b1d8","type":"ui_base","theme":{"name":"theme-dark","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#097479","value":"#097479","edited":false},"page-titlebar-backgroundColor":{"value":"#097479","edited":false},"page-backgroundColor":{"value":"#111111","edited":false},"page-sidebar-backgroundColor":{"value":"#000000","edited":false},"group-textColor":{"value":"#0eb8c0","edited":false},"group-borderColor":{"value":"#555555","edited":false},"group-backgroundColor":{"value":"#333333","edited":false},"widget-textColor":{"value":"#eeeeee","edited":false},"widget-backgroundColor":{"value":"#097479","edited":false},"widget-borderColor":{"value":"#333333","edited":false},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}},"angularTheme":{"primary":"indigo","accents":"blue","warn":"red","background":"grey"}},"site":{"name":"Dashboard home.mayeur.be ","hideToolbar":"false","allowSwipe":"true","allowTempTheme":"true","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"8be9db27.0fe618","type":"ui_tab","z":"","name":"Environment","icon":"dashboard","order":2},{"id":"731da380.7220bc","type":"ui_group","z":"","name":"Graphs","tab":"8be9db27.0fe618","order":3,"disp":true,"width":"6","collapse":false},{"id":"9104f0bf.73a9a","type":"ui_group","z":"","name":"Lobo gauge","tab":"23e8f59.c0ff88a","order":1,"disp":true,"width":"6","collapse":false},{"id":"50cf01af.2033f","type":"ui_group","z":"","name":"Jardin","tab":"8be9db27.0fe618","order":1,"disp":true,"width":"6","collapse":false},{"id":"23e8f59.c0ff88a","type":"ui_tab","z":"","name":"Servers","icon":"dashboard","order":3},{"id":"b09c2be3.702d4","type":"ui_group","z":"","name":"Lobo graphs","tab":"23e8f59.c0ff88a","order":2,"disp":true,"width":"6","collapse":false},{"id":"81f03db8.1727a8","type":"ui_tab","z":"","name":"IoT controls","icon":"dashboard","order":1},{"id":"c3a3bae1.621c7","type":"ui_group","z":"","name":"Rez-de-chaussée","tab":"81f03db8.1727a8","order":2,"disp":true,"width":"6","collapse":true},{"id":"8f062600.79f9f8","type":"ui_group","z":"","name":"En test","tab":"33c7844.c05197c","order":1,"disp":true,"width":"6","collapse":true},{"id":"625e81ee.91c05","type":"ui_group","z":"","name":"Bureau","tab":"8be9db27.0fe618","order":2,"disp":true,"width":"6","collapse":false},{"id":"d2db46a4.bbe668","type":"ui_group","z":"","name":"1er étage","tab":"81f03db8.1727a8","order":3,"disp":true,"width":"6","collapse":true},{"id":"2587caa.ce67a36","type":"ui_group","z":"","name":"2ème étage","tab":"81f03db8.1727a8","order":4,"disp":true,"width":"6","collapse":true},{"id":"82f4cce9.58c46","type":"ui_group","z":"","name":"Cave","tab":"81f03db8.1727a8","order":1,"disp":true,"width":"6","collapse":true},{"id":"6be74572.49a4dc","type":"ui_group","z":"","name":"pignouf gauge","tab":"23e8f59.c0ff88a","order":3,"disp":true,"width":"6","collapse":false},{"id":"b8efdba7.a14d98","type":"ui_group","z":"","name":"pignouf graphs","tab":"23e8f59.c0ff88a","order":4,"disp":true,"width":"6","collapse":false},{"id":"1e881ccb.0c8923","type":"ui_group","z":"","name":"Devices online state","tab":"81f03db8.1727a8","order":5,"disp":true,"width":"6","collapse":true},{"id":"33c7844.c05197c","type":"ui_tab","z":"","name":"Dev","icon":"dashboard","order":5},{"id":"7aecf674.054878","type":"ui_group","z":"","name":"sushi gauge","tab":"33c7844.c05197c","order":3,"disp":true,"width":"6","collapse":false},{"id":"ac6c0ae3.4fc7c8","type":"ui_group","z":"","name":"sushi graphs","tab":"33c7844.c05197c","order":2,"disp":true,"width":"6","collapse":false},{"id":"6000990e.c9a588","type":"ui_tab","z":"","name":"UPS","icon":"dashboard","order":4},{"id":"1486bc1b.577fd4","type":"ui_group","z":"","name":"UPS Load","tab":"6000990e.c9a588","order":1,"disp":true,"width":"6","collapse":false},{"id":"9186db63.3d1d58","type":"ui_group","z":"","name":"Voltage","tab":"6000990e.c9a588","order":4,"disp":true,"width":"6","collapse":false},{"id":"bbc40293.6e736","type":"ui_group","z":"","name":"Battery","tab":"6000990e.c9a588","order":2,"disp":true,"width":"6","collapse":false},{"id":"fdfd8c14.5198f","type":"mqtt in","z":"7e596646.ff51a8","name":"Temperature Jardin","topic":"common/telldus live/Home/sensors/Jardin/data/temperature/value","qos":"2","broker":"e29f85d0.5a40a8","x":110,"y":320,"wires":[["270631c6.a4a8ee","5286ba72.d08084","a58164b2.ff6278"]]},{"id":"270631c6.a4a8ee","type":"ui_chart","z":"7e596646.ff51a8","name":"","group":"731da380.7220bc","order":1,"width":"0","height":"0","label":"Température (°C)","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"-10","ymax":"40","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"colors":["#1f77b4","#ff8040","#ffff80","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":2,"x":550,"y":360,"wires":[[],[]]},{"id":"5286ba72.d08084","type":"ui_gauge","z":"7e596646.ff51a8","name":"","group":"50cf01af.2033f","order":1,"width":0,"height":0,"gtype":"gage","title":"Température (°C)","label":"°C","format":"{{value}}","min":"-10","max":"40","colors":["#0000ff","#00ff00","#ca3838"],"seg1":"17","seg2":"25","x":550,"y":320,"wires":[]},{"id":"e6c92e90.a79dc","type":"mqtt in","z":"7e596646.ff51a8","name":"Temperature DHT16","topic":"/SonOff_DTH16/sndht16/Temperature","qos":"1","broker":"e29f85d0.5a40a8","x":110,"y":380,"wires":[["270631c6.a4a8ee","40549d67.47366c"]]},{"id":"d681f8c6.a15998","type":"mqtt in","z":"7e596646.ff51a8","name":"","topic":"/SonOff_DTH16/sndht16/Humidity","qos":"1","broker":"e29f85d0.5a40a8","x":160,"y":560,"wires":[["b2683567.5b3078","de388ef1.e167f"]]},{"id":"de388ef1.e167f","type":"ui_chart","z":"7e596646.ff51a8","name":"","group":"731da380.7220bc","order":2,"width":0,"height":0,"label":"Humidité (%)","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"0","ymax":"100","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"colors":["#1f77b4","#ff8000","#ffff80","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":2,"x":530,"y":520,"wires":[[],[]]},{"id":"24f5352a.8ab01a","type":"mqtt in","z":"7e596646.ff51a8","name":"Humidity Jardin","topic":"common/telldus live/Home/sensors/Jardin/data/humidity/value","qos":"2","broker":"e29f85d0.5a40a8","x":100,"y":480,"wires":[["6937ee77.75958","de388ef1.e167f","a58164b2.ff6278"]]},{"id":"6937ee77.75958","type":"ui_gauge","z":"7e596646.ff51a8","name":"","group":"50cf01af.2033f","order":2,"width":0,"height":0,"gtype":"gage","title":"Humidité (%)","label":"%","format":"{{value}}","min":0,"max":"100","colors":["#0000ff","#00ff00","#ca3838"],"seg1":"40","seg2":"66","x":530,"y":480,"wires":[]},{"id":"b2683567.5b3078","type":"ui_gauge","z":"7e596646.ff51a8","name":"","group":"625e81ee.91c05","order":2,"width":0,"height":0,"gtype":"gage","title":"Humidité (%)","label":"%","format":"{{value}}","min":0,"max":"100","colors":["#0000ff","#00ff00","#ca3838"],"seg1":"40","seg2":"66","x":530,"y":560,"wires":[]},{"id":"40549d67.47366c","type":"ui_gauge","z":"7e596646.ff51a8","name":"","group":"625e81ee.91c05","order":1,"width":0,"height":0,"gtype":"gage","title":"Température (°C)","label":"°C","format":"{{value}}","min":"-10","max":"40","colors":["#0000ff","#00ff00","#ca3838"],"seg1":"17","seg2":"25","x":550,"y":400,"wires":[]},{"id":"a9869a2e.ab66a8","type":"ui_text","z":"7e596646.ff51a8","group":"625e81ee.91c05","order":3,"width":0,"height":0,"name":"","label":"Dew_Point T°","format":"{{msg.payload}} °C","layout":"col-center","x":540,"y":620,"wires":[]},{"id":"6f1089bf.d22728","type":"mqtt in","z":"7e596646.ff51a8","name":"","topic":"/SonOff_DTH16/calcul/Temperature_dew_point","qos":"1","broker":"e29f85d0.5a40a8","x":200,"y":620,"wires":[["a9869a2e.ab66a8"]]},{"id":"b232040.31e23","type":"mqtt out","z":"e460325d.9cdbf","name":"","topic":"","qos":"0","retain":"false","broker":"e29f85d0.5a40a8","x":750,"y":220,"wires":[]},{"id":"cace9f4.c8f4f6","type":"ui_switch","z":"e460325d.9cdbf","name":"Lampe Chevet Bureau","label":"Lampe Chevet Bureau","group":"d2db46a4.bbe668","order":1,"width":0,"height":0,"passthru":false,"decouple":"true","topic":"/SonOff_B4/gpio/12","style":"","onvalue":"1","onvalueType":"str","onicon":"","oncolor":"","offvalue":"0","offvalueType":"str","officon":"","offcolor":"","x":580,"y":220,"wires":[["b232040.31e23"]]},{"id":"3ae84d83.68abf2","type":"mqtt in","z":"e460325d.9cdbf","name":"","topic":"/SonOff_B4/relay/state","qos":"0","broker":"e29f85d0.5a40a8","x":140,"y":220,"wires":[["cace9f4.c8f4f6"]]},{"id":"768455cd.d5bdec","type":"mqtt in","z":"e460325d.9cdbf","name":"","topic":"/SonOff_DTH16/relay/state","qos":"0","broker":"e29f85d0.5a40a8","x":150,"y":340,"wires":[["a69ff7f6.aff608"]]},{"id":"a69ff7f6.aff608","type":"ui_switch","z":"e460325d.9cdbf","name":"Relais DHT16","label":"relais DHT16","group":"d2db46a4.bbe668","order":3,"width":0,"height":0,"passthru":false,"decouple":"true","topic":"/SonOff_DTH16/gpio/12","style":"","onvalue":"1","onvalueType":"str","onicon":"","oncolor":"","offvalue":"0","offvalueType":"str","officon":"","offcolor":"","x":560,"y":340,"wires":[["ab70d32e.482c7"]]},{"id":"ab70d32e.482c7","type":"mqtt out","z":"e460325d.9cdbf","name":"","topic":"","qos":"0","retain":"false","broker":"e29f85d0.5a40a8","x":750,"y":340,"wires":[]},{"id":"a58164b2.ff6278","type":"function","z":"7e596646.ff51a8","name":"Dew_Point","func":"context.temp = context.temp || 0.0;\ncontext.humidity = context.humidity || 0.0;\nvar dewPoint = 0.00;\n\nif (msg.topic === 'common/telldus live/Home/sensors/Jardin/data/temperature/value') {\n    context.temp = msg.payload\n} else if (msg.topic === 'common/telldus live/Home/sensors/Jardin/data/humidity/value') {\n    context.humidity = msg.payload\n}\ndewPoint = context.temp - (100-context.humidity)/5\n\nreturn {topic: 'dew_point', payload: dewPoint.toFixed(2)}\nreturn msg;","outputs":1,"noerr":0,"x":330,"y":440,"wires":[["c71abf85.31aa2"]]},{"id":"c71abf85.31aa2","type":"ui_text","z":"7e596646.ff51a8","group":"50cf01af.2033f","order":3,"width":0,"height":0,"name":"","label":"Dew_Point T° ","format":"{{msg.payload}} °C","layout":"col-center","x":540,"y":440,"wires":[]},{"id":"22b2d545.92242a","type":"function","z":"7e596646.ff51a8","name":"telldusSetOnOffDevices","func":"// Node-RED function to\n// a) list all Telldus devices (device = everything in Telldus Live except sensors)\n//\n// The code below relies on the following modules to be installed in the Node-RED environment, including being set up\n// in the functionGlobalContext section of the Node-RED settings.js config file (see last section of http://nodered.org/docs/writing-functions.html page)\n//\n// a) Telldus-Live module (https://github.com/TheThingSystem/node-telldus-live)\n//\n//\n// The function will fire one output message for each device it gets information about from Telldus Live.\n// By default the device id and name is included in the messages, but this can be customised as needed.\n//\n\n// Define Telldus Live API credentials\nvar publicKey = flow.get('publicKey');\nvar privateKey = flow.get('privateKey') ;\nvar token = flow.get('token');\nvar tokenSecret = flow.get('tokenSecret');\n\nvar cloud  ;\n\nvar id = msg.payload.id;\nvar value = msg.payload.value;\nvar deviceName = msg.payload.name;\n\n// var devices = flow.get('devices') || {};\n// var device = devices.find(d => d.id === id);\n// var device = devices.find(d => d.name === deviceName);\nvar device = flow.get(deviceName) || {};\n\nf = function(offset, p, s) {\n    return function(err, device) {\n        var d, type, types;\n\n        if (!!err) return console.log(s + ' id=' + p.id + ': ' + err.message);\n\n        console.log('device #' + offset + ' ' + s + ': '); console.log(device);\n        types = { 'selflearning-switch' : 'onoff', 'selflearning-dimmer' : 'dimmer', 'codeswitch'          : 'onoff' };\n\n        type = null;\n        d = device.model.split(':');\n        type = types[d[0]];\n        if (!type) return;\n\n        console.log('/device/switch' + '/' + (d[d.length - 1] || 'telldus') + '/' + type);\n        console.log('    uuid=teldus:' + device.id);\n        console.log('    perform: off, on');\n        console.log('    name: ' + device.name);\n        console.log('last update: ' + device.lastUpdated*1000);\n        console.log('    status: ' + (device.online === '0' ? 'absent' : device.status));\n        console.log('    info:');\n        if (type === 'dimmer') console.log('      dimmer: percentage');\n        console.log('    values:');\n        if (type === 'dimmer') console.log('      dimmer: ' + Math.round((1-(255 - device.statevalue)/255)*100) + '%');\n        console.log('');\n\n    };\n};\n\n// for (i = 0; i < devices.length; i++) {\n//   if (devices[i].type === 'device')  f(i, devices[i], 'getDeviceInfo');\n// }\n    if (device.type === 'device') f(0, device, 'getDeviceInfo'); \n\n\n// Create and log into new TelldusAPI object\ncloud = new context.global.telldusLive.TelldusAPI({ publicKey  : publicKey, privateKey : privateKey });\n\ncloud.login(token, tokenSecret, function(err, user) {\n  if (!!err) return console.log('login error: ' + err.message);\n  cloud.onOffDevice(device, value, function(err, results) {\n    if(!!err) return JSON.stringify(err.message); // console.log('login error: ' + err.message);\n    msg.payload = JSON.stringify(results);\n  });\n \n}).on('error', function(err) {\n  console.log('background error: ' + err.message);\n});\n\n\nreturn msg;","outputs":1,"noerr":0,"x":670,"y":760,"wires":[["be74e6fc.3d9988"]]},{"id":"bc61c48c.1a6ff8","type":"ui_switch","z":"7e596646.ff51a8","name":"","label":"Porte Surgélateur","group":"8f062600.79f9f8","order":0,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"","style":"","onvalue":"{\"id\":\"1595686\",\"name\":\"PorteSurgelateur\",\"value\":true}","onvalueType":"json","onicon":"","oncolor":"","offvalue":"{\"id\":\"1595686\",\"name\":\"PorteSurgelateur\",\"value\":false}","offvalueType":"json","officon":"","offcolor":"","x":110,"y":760,"wires":[["22b2d545.92242a"]]},{"id":"47fc02c9.413f7c","type":"inject","z":"7e596646.ff51a8","name":"","topic":"","payload":"","payloadType":"date","repeat":"60","crontab":"","once":true,"onceDelay":"2","x":110,"y":700,"wires":[["efe3faa5.7716a8"]]},{"id":"416960d8.1436f","type":"mqtt in","z":"7e596646.ff51a8","name":"Porte Surgélateur","topic":"common/telldus live/54242/devices/PorteSurgelateur/status","qos":"0","broker":"e29f85d0.5a40a8","x":100,"y":820,"wires":[["f2ed3725.eff1f8"]]},{"id":"f2ed3725.eff1f8","type":"ui_switch","z":"7e596646.ff51a8","name":"","label":"Etat Porte Surgélateur","group":"82f4cce9.58c46","order":1,"width":0,"height":0,"passthru":false,"decouple":"true","topic":"","style":"","onvalue":"on","onvalueType":"str","onicon":"error","oncolor":"#E2D96E","offvalue":"off","offvalueType":"str","officon":"done","offcolor":"#3FADB5","x":330,"y":820,"wires":[[]]},{"id":"971f84e3.781278","type":"mqtt in","z":"7e596646.ff51a8","name":"Porte Meuble TV","topic":"common/telldus live/54242/devices/TVAmpli/status","qos":"0","broker":"e29f85d0.5a40a8","x":100,"y":880,"wires":[["5a67a00d.d2471","6e79ba24.d2f2b4"]]},{"id":"3ee266fa.c35a6a","type":"ui_switch","z":"7e596646.ff51a8","name":"","label":"Porte TV","group":"c3a3bae1.621c7","order":5,"width":0,"height":0,"passthru":false,"decouple":"false","topic":"","style":"","onvalue":"{\"name\":\"TVAmpli\",\"value\":true}","onvalueType":"json","onicon":"","oncolor":"","offvalue":"{\"name\":\"TVAmpli\",\"value\":false}","offvalueType":"json","officon":"","offcolor":"","x":460,"y":880,"wires":[["21019f20.f9de2"]]},{"id":"318df990.817d76","type":"function","z":"7e596646.ff51a8","name":"telldusSetOnOffDevices","func":"// Node-RED function to\n// a) list all Telldus devices (device = everything in Telldus Live except sensors)\n//\n// The code below relies on the following modules to be installed in the Node-RED environment, including being set up\n// in the functionGlobalContext section of the Node-RED settings.js config file (see last section of http://nodered.org/docs/writing-functions.html page)\n//\n// a) Telldus-Live module (https://github.com/TheThingSystem/node-telldus-live)\n//\n//\n// The function will fire one output message for each device it gets information about from Telldus Live.\n// By default the device id and name is included in the messages, but this can be customised as needed.\n//\n\n// Define Telldus Live API credentials\nvar publicKey = flow.get('publicKey');\nvar privateKey = flow.get('privateKey') ;\nvar token = flow.get('token');\nvar tokenSecret = flow.get('tokenSecret');\nvar cloud  ;\n\nvar value = msg.payload.value;\nvar deviceName = msg.payload.name;\n\n// var devices = flow.get('devices') || {};\n// var device = devices.find(d => d.id === id);\n// var device = devices.find(d => d.name === deviceName);\nvar device = flow.get(deviceName) || {};\n\nf = function(offset, p, s) {\n    return function(err, device) {\n        var d, type, types;\n\n        if (!!err) return console.log(s + ' id=' + p.id + ': ' + err.message);\n\n        console.log('device #' + offset + ' ' + s + ': '); console.log(device);\n        types = { 'selflearning-switch' : 'onoff', 'selflearning-dimmer' : 'dimmer', 'codeswitch'          : 'onoff' };\n\n        type = null;\n        d = device.model.split(':');\n        type = types[d[0]];\n        if (!type) return;\n\n        console.log('/device/switch' + '/' + (d[d.length - 1] || 'telldus') + '/' + type);\n        console.log('    uuid=teldus:' + device.id);\n        console.log('    perform: off, on');\n        console.log('    name: ' + device.name);\n        console.log('last update: ' + device.lastUpdated*1000);\n        console.log('    status: ' + (device.online === '0' ? 'absent' : device.status));\n        console.log('    info:');\n        if (type === 'dimmer') console.log('      dimmer: percentage');\n        console.log('    values:');\n        if (type === 'dimmer') console.log('      dimmer: ' + Math.round((1-(255 - device.statevalue)/255)*100) + '%');\n        console.log('');\n\n    };\n};\n\n// for (i = 0; i < devices.length; i++) {\n//   if (devices[i].type === 'device')  f(i, devices[i], 'getDeviceInfo');\n// }\n    if (device.type === 'device') f(0, device, 'getDeviceInfo'); \n\n\n// Create and log into new TelldusAPI object\ncloud = new context.global.telldusLive.TelldusAPI({ publicKey  : publicKey, privateKey : privateKey });\n\ncloud.login(token, tokenSecret, function(err, user) {\n  if (!!err) return console.log('login error: ' + err.message);\n  cloud.onOffDevice(device, value, function(err, results) {\n    if(!!err) return JSON.stringify(err.message); // console.log('login error: ' + err.message);\n    msg.payload = JSON.stringify(results);\n  });\n \n}).on('error', function(err) {\n  console.log('background error: ' + err.message);\n});\n\n\nreturn msg;","outputs":1,"noerr":0,"x":690,"y":1020,"wires":[["be74e6fc.3d9988"]]},{"id":"3f6de956.06aa56","type":"ui_switch","z":"7e596646.ff51a8","name":"","label":"Ampli Chambre","group":"d2db46a4.bbe668","order":2,"width":0,"height":0,"passthru":false,"decouple":"true","topic":"","style":"","onvalue":"{\"name\":\"AmpliChambre\",\"value\":true}","onvalueType":"json","onicon":"","oncolor":"","offvalue":"{\"name\":\"AmpliChambre\",\"value\":false}","offvalueType":"json","officon":"","offcolor":"","x":460,"y":1020,"wires":[["318df990.817d76"]]},{"id":"b25d27e8.240e18","type":"mqtt in","z":"8de34dec.0311b","name":"","topic":"lobo/CPU%","qos":"1","broker":"e29f85d0.5a40a8","x":110,"y":60,"wires":[["cbae0fea.d144a","292ba371.99c9fc"]]},{"id":"87c8bf19.2b0d6","type":"ui_chart","z":"8de34dec.0311b","name":"","group":"b09c2be3.702d4","order":2,"width":0,"height":0,"label":"CPU%","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"colors":["#1f77b4","#ff7f0e","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":2,"x":690,"y":60,"wires":[[],[]]},{"id":"cbae0fea.d144a","type":"ui_gauge","z":"8de34dec.0311b","name":"","group":"9104f0bf.73a9a","order":1,"width":0,"height":0,"gtype":"gage","title":"CPU%","label":"%","format":"{{value}}","min":0,"max":"100","colors":["#00ff00","#e6e600","#ca3838"],"seg1":"50","seg2":"75","x":290,"y":100,"wires":[]},{"id":"1ce619b6.396426","type":"mqtt in","z":"8de34dec.0311b","name":"","topic":"lobo/freeRAM%","qos":"1","broker":"e29f85d0.5a40a8","x":120,"y":500,"wires":[["edbb5b38.5006e8","e6852330.be026"]]},{"id":"edbb5b38.5006e8","type":"ui_chart","z":"8de34dec.0311b","name":"","group":"b09c2be3.702d4","order":2,"width":0,"height":0,"label":"free MEM%","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"0","ymax":"100","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":2,"x":530,"y":500,"wires":[[],[]]},{"id":"e6852330.be026","type":"ui_gauge","z":"8de34dec.0311b","name":"","group":"9104f0bf.73a9a","order":1,"width":0,"height":0,"gtype":"gage","title":"free MEM%","label":"%","format":"{{value}}","min":0,"max":"100","colors":["#ff0000","#e6e600","#00ff00"],"seg1":"30","seg2":"66","x":330,"y":500,"wires":[]},{"id":"7f89f4ff.9e390c","type":"mqtt in","z":"8de34dec.0311b","name":"","topic":"lobo/temperature","qos":"1","broker":"e29f85d0.5a40a8","x":120,"y":220,"wires":[["4141c6ae.ee0018","4bca02d8.b5a20c","9924c4fc.28b358"]]},{"id":"4141c6ae.ee0018","type":"ui_gauge","z":"8de34dec.0311b","name":"","group":"9104f0bf.73a9a","order":1,"width":0,"height":0,"gtype":"gage","title":"temperature","label":"°C","format":"{{value}}","min":"20","max":"80","colors":["#00ff00","#e6e600","#ca3838"],"seg1":"60","seg2":"75","x":310,"y":220,"wires":[]},{"id":"4bca02d8.b5a20c","type":"ui_chart","z":"8de34dec.0311b","name":"","group":"b09c2be3.702d4","order":2,"width":0,"height":0,"label":"temperature","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"20","ymax":"80","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":2,"x":490,"y":220,"wires":[[],[]]},{"id":"5a67a00d.d2471","type":"function","z":"7e596646.ff51a8","name":"tdFormat","func":"var device = {\"name\": \"\", \"value\": false};\nvar s = msg.topic.split('/');\ndevice.name = s[4] ;\nif (msg.payload === 'on') {\n    device.value = true;\n} \nelse {\n    device.value = false;\n}\nmsg.payload = device;\nreturn msg;","outputs":1,"noerr":0,"x":280,"y":880,"wires":[["3ee266fa.c35a6a"]]},{"id":"21019f20.f9de2","type":"function","z":"7e596646.ff51a8","name":"telldusSetOnOffDevices","func":"// Node-RED function to\n// a) list all Telldus devices (device = everything in Telldus Live except sensors)\n//\n// The code below relies on the following modules to be installed in the Node-RED environment, including being set up\n// in the functionGlobalContext section of the Node-RED settings.js config file (see last section of http://nodered.org/docs/writing-functions.html page)\n//\n// a) Telldus-Live module (https://github.com/TheThingSystem/node-telldus-live)\n//\n//\n// The function will fire one output message for each device it gets information about from Telldus Live.\n// By default the device id and name is included in the messages, but this can be customised as needed.\n//\n\n// Define Telldus Live API credentials\nvar publicKey = flow.get('publicKey');\nvar privateKey = flow.get('privateKey') ;\nvar token = flow.get('token');\nvar tokenSecret = flow.get('tokenSecret');\nvar cloud  ;\n\n\n\nvar id = msg.payload.id;\nvar value = msg.payload.value;\nvar deviceName = msg.payload.name;\n\n// var devices = flow.get('devices') || {};\n// var device = devices.find(d => d.id === id);\n// var device = devices.find(d => d.name === deviceName);\nvar device = flow.get(deviceName) || {};\n\nf = function(offset, p, s) {\n    return function(err, device) {\n        var d, type, types;\n\n        if (!!err) return console.log(s + ' id=' + p.id + ': ' + err.message);\n\n        console.log('device #' + offset + ' ' + s + ': '); console.log(device);\n        types = { 'selflearning-switch' : 'onoff', 'selflearning-dimmer' : 'dimmer', 'codeswitch'          : 'onoff' };\n\n        type = null;\n        d = device.model.split(':');\n        type = types[d[0]];\n        if (!type) return;\n\n        console.log('/device/switch' + '/' + (d[d.length - 1] || 'telldus') + '/' + type);\n        console.log('    uuid=teldus:' + device.id);\n        console.log('    perform: off, on');\n        console.log('    name: ' + device.name);\n        console.log('last update: ' + device.lastUpdated*1000);\n        console.log('    status: ' + (device.online === '0' ? 'absent' : device.status));\n        console.log('    info:');\n        if (type === 'dimmer') console.log('      dimmer: percentage');\n        console.log('    values:');\n        if (type === 'dimmer') console.log('      dimmer: ' + Math.round((1-(255 - device.statevalue)/255)*100) + '%');\n        console.log('');\n\n    };\n};\n\n// for (i = 0; i < devices.length; i++) {\n//   if (devices[i].type === 'device')  f(i, devices[i], 'getDeviceInfo');\n// }\n    if (device.type === 'device') f(0, device, 'getDeviceInfo'); \n\n\n// Create and log into new TelldusAPI object\ncloud = new context.global.telldusLive.TelldusAPI({ publicKey  : publicKey, privateKey : privateKey });\n\ncloud.login(token, tokenSecret, function(err, user) {\n  if (!!err) return console.log('login error: ' + err.message);\n  cloud.onOffDevice(device, value, function(err, results) {\n    if(!!err) return JSON.stringify(err.message); // console.log('login error: ' + err.message);\n    msg.payload = JSON.stringify(results);\n  });\n \n}).on('error', function(err) {\n  console.log('background error: ' + err.message);\n});\n\n\nreturn msg;","outputs":1,"noerr":0,"x":670,"y":880,"wires":[["be74e6fc.3d9988"]]},{"id":"6e79ba24.d2f2b4","type":"ui_switch","z":"7e596646.ff51a8","name":"","label":"Etat Porte TV","group":"c3a3bae1.621c7","order":4,"width":0,"height":0,"passthru":false,"decouple":"true","topic":"","style":"","onvalue":"on","onvalueType":"str","onicon":"live_tv","oncolor":"#3FADB5","offvalue":"off","offvalueType":"str","officon":"tv","offcolor":"#FF0000","x":300,"y":940,"wires":[[]]},{"id":"aa4ca288.e36b2","type":"function","z":"7e596646.ff51a8","name":"tdFormat","func":"var device = {\"name\": \"\", \"value\": false};\nvar s = msg.topic.split('/');\ndevice.name = s[4] ;\nif (msg.payload === 'on') {\n    device.value = true;\n} \nelse {\n    device.value = false;\n}\nmsg.payload = device;\nreturn msg;","outputs":1,"noerr":0,"x":280,"y":1020,"wires":[["3f6de956.06aa56"]]},{"id":"5ed130a4.3a3ba","type":"mqtt in","z":"7e596646.ff51a8","name":"Ampli Chambre","topic":"common/telldus live/54242/devices/AmpliChambre/status","qos":"0","broker":"e29f85d0.5a40a8","x":100,"y":1020,"wires":[["aa4ca288.e36b2"]]},{"id":"24c103e5.cf332c","type":"function","z":"7e596646.ff51a8","name":"telldusDimDevices","func":"// Node-RED function to\n// a) list all Telldus devices (device = everything in Telldus Live except sensors)\n//\n// The code below relies on the following modules to be installed in the Node-RED environment, including being set up\n// in the functionGlobalContext section of the Node-RED settings.js config file (see last section of http://nodered.org/docs/writing-functions.html page)\n//\n// a) Telldus-Live module (https://github.com/TheThingSystem/node-telldus-live)\n//\n//\n// The function will fire one output message for each device it gets information about from Telldus Live.\n// By default the device id and name is included in the messages, but this can be customised as needed.\n//\n\n// Define Telldus Live API credentials\nvar publicKey = flow.get('publicKey');\nvar privateKey = flow.get('privateKey') ;\nvar token = flow.get('token');\nvar tokenSecret = flow.get('tokenSecret');\nvar cloud  ;\n\nvar value = msg.payload.value;\nvar deviceName = msg.payload.name;\n\n// var devices = flow.get('devices') || {};\n// var device = devices.find(d => d.id === id);\n// var device = devices.find(d => d.name === deviceName);\nvar device = flow.get(deviceName) || {};\n\nf = function(offset, p, s) {\n    return function(err, device) {\n        var d, type, types;\n\n        if (!!err) return console.log(s + ' id=' + p.id + ': ' + err.message);\n\n        console.log('device #' + offset + ' ' + s + ': '); console.log(device);\n        types = { 'selflearning-switch' : 'onoff', 'selflearning-dimmer' : 'dimmer', 'codeswitch'          : 'onoff' };\n\n        type = null;\n        d = device.model.split(':');\n        type = types[d[0]];\n        if (!type) return;\n\n        console.log('/device/switch' + '/' + (d[d.length - 1] || 'telldus') + '/' + type);\n        console.log('    uuid=teldus:' + device.id);\n        console.log('    perform: off, on');\n        console.log('    name: ' + device.name);\n        console.log('last update: ' + device.lastUpdated*1000);\n        console.log('    status: ' + (device.online === '0' ? 'absent' : device.status));\n        console.log('    info:');\n        if (type === 'dimmer') console.log('      dimmer: percentage');\n        console.log('    values:');\n        if (type === 'dimmer') console.log('      dimmer: ' + Math.round((1-(255 - device.statevalue)/255)*100) + '%');\n        console.log('');\n\n    };\n};\n\n// for (i = 0; i < devices.length; i++) {\n//   if (devices[i].type === 'device')  f(i, devices[i], 'getDeviceInfo');\n// }\n    if (device.type === 'device') f(0, device, 'getDeviceInfo'); \n\n\n// Create and log into new TelldusAPI object\ncloud = new context.global.telldusLive.TelldusAPI({ publicKey  : publicKey, privateKey : privateKey });\n\ncloud.login(token, tokenSecret, function(err, user) {\n  if (!!err) return console.log('login error: ' + err.message);\n  if (value <= 15) {\n    /*  \n    cloud.dimDevice(device, 0, function(err, results) {\n    if(!!err) return JSON.stringify(err.message); // console.log('login error: ' + err.message);\n    msg.payload = JSON.stringify(results);  \n    });\n    */\n    cloud.onOffDevice(device, false, function(err, results) {\n    if(!!err) return JSON.stringify(err.message); // console.log('login error: ' + err.message);\n    msg.payload = JSON.stringify(results);\n  });  \n  } else {\n    cloud.dimDevice(device, value, function(err, results) {\n    if(!!err) return JSON.stringify(err.message); // console.log('login error: ' + err.message);\n    msg.payload = JSON.stringify(results);\n  });    \n  }\n\n \n}).on('error', function(err) {\n  console.log('background error: ' + err.message);\n});\n\n\nreturn msg;","outputs":1,"noerr":0,"x":930,"y":1180,"wires":[["be74e6fc.3d9988"]]},{"id":"816936e3.d4f568","type":"mqtt in","z":"7e596646.ff51a8","name":"Plafonnier SàM","topic":"common/telldus live/54242/devices/PlafonnierSalleManger/status","qos":"0","broker":"e29f85d0.5a40a8","x":100,"y":1240,"wires":[["9981abd9.4e6b48"]]},{"id":"962c8ebe.0db28","type":"ui_slider","z":"7e596646.ff51a8","name":"","label":"Plafonnier SàM","group":"c3a3bae1.621c7","order":1,"width":0,"height":0,"passthru":false,"topic":"common/telldus live/54242/devices/PlafonnierSalleManger/state value","min":0,"max":"255","step":"5","x":540,"y":1180,"wires":[["f0242f3.376bdd"]]},{"id":"fa955b4a.019068","type":"mqtt in","z":"7e596646.ff51a8","name":"Plafonnier SàM dimmer","topic":"common/telldus live/54242/devices/PlafonnierSalleManger/state value","qos":"0","broker":"e29f85d0.5a40a8","x":120,"y":1180,"wires":[["9981abd9.4e6b48"]]},{"id":"f0242f3.376bdd","type":"function","z":"7e596646.ff51a8","name":"tdFormatDim","func":"var device = {\"name\": \"\", \"value\": 0};\nvar s = msg.topic.split('/');\ndevice.name = s[4] ;\ndevice.value = msg.payload ; \nmsg.payload = device;\nreturn msg;","outputs":1,"noerr":0,"x":730,"y":1180,"wires":[["24c103e5.cf332c"]]},{"id":"9981abd9.4e6b48","type":"function","z":"7e596646.ff51a8","name":"check dim state","func":"context.status = context.status || 'undefined';\ncontext.statevalue = context.statevalue || 0;\n\nif (msg.topic === 'common/telldus live/54242/devices/PlafonnierSalleManger/state value') {\n    context.statevalue = msg.payload;    \n} \nelse if (msg.topic === 'common/telldus live/54242/devices/PlafonnierSalleManger/status') {\n    context.status = msg.payload;\n}\n\nif (context.status === 'on' && context.statevalue === 'undefined') {\n    msg.payload = 255;\n} \nelse if (context.status === 'off') {\n    msg.payload = 0;\n} else {\n    msg.payload = context.statevalue\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":340,"y":1180,"wires":[["962c8ebe.0db28"]]},{"id":"d2c3507b.1f6d2","type":"exec","z":"7e596646.ff51a8","command":"ssh 'root@192.168.0.16' 'shutdown -h now'","addpay":false,"append":"","useSpawn":"false","timer":"","oldrc":false,"name":"Shutdown NAS","x":1020,"y":1400,"wires":[["a8e3d4fe.d327f8"],[],[]]},{"id":"be74e6fc.3d9988","type":"delay","z":"7e596646.ff51a8","name":"","pauseType":"delay","timeout":"1","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":1280,"y":1020,"wires":[["efe3faa5.7716a8"]]},{"id":"efe3faa5.7716a8","type":"function","z":"7e596646.ff51a8","name":"telldusMqttBridge","func":"// Node-RED function to\n// a) extract data from TelldusLive API, and\n// b) send that data to MQTT for later consumption by various MQTT clients\n//\n// The code below relies on the following modules to be installed in the Node-RED environment, including being set up\n// in the functionGlobalContext section of the Node-RED settings.js config file (see last section of http://nodered.org/docs/writing-functions.html page)\n//\n// a) MQTT module (https://www.npmjs.com/package/mqtt)\n// b) Telldus-Live module (https://github.com/TheThingSystem/node-telldus-live)\n//\n//\n// Code below borrows a lot from the test script at https://github.com/TheThingSystem/node-telldus-live, with main addition being the use of MQTT client to publish such messages.\n//\n\n// Define Telldus Live API credentials\nvar publicKey = flow.get('publicKey');\nvar privateKey = flow.get('privateKey') ;\nvar token = flow.get('token');\nvar tokenSecret = flow.get('tokenSecret');\nvar cloud  ;\n\nvar mqtt = context.global.mqtt;\nvar diff = context.global.diff.diff;\nvar mqttClient = mqtt.connect('mqtt://192.168.0.4', {username: 'IoT', password: 'Bretzel58'});\nvar batteryStatus;\n\n// Convenience function to format datetimes in nice human readable format\nfunction formatDate(d){\n  if(typeof d === 'number') d = new Date(d);\n  if(!(d instanceof Date)) return d;\n  function pad(n){return n<10 ? '0'+n : n}\n  return d.getFullYear() + '-' + pad(d.getMonth()+1) + '-' + pad(d.getDate()) + ' ' + pad(d.getHours()) + \":\"    + pad(d.getMinutes()) + \":\"     + pad(d.getSeconds());\n}\n\n// Create and log into new TelldusAPI object\ncloud = new context.global.telldusLive.TelldusAPI({ publicKey  : publicKey , privateKey : privateKey });\n\ncloud.login(token, tokenSecret, function(err, user) {\n\n  if (!!err) return console.log('login error: ' + err.message);\n/*\n  console.log('user: ');\n  console.log(user);\n  console.log('');\n  console.log('');\n*/\n  // \n  cloud.getSensors(function(err, sensors) {\n    var f, i;\n\n    if (!!err) return console.log('getSensors: ' + err.message);\n\n    f = function(offset, p, s) {\n\n      return function(err, sensor) {\n        var i, prop, props, type;\n\t\tvar oldSensor;\n        if (!!err) return console.log(s + ' id=' + p.id + ': ' + err.message);\n\n\t\ttry {\n\t\t\toldSensor = flow.get(sensor.name)||{};\n\t\t\tif (!diff(sensor, oldSensor)) return ;\n\t\t}\n\t\tcatch(e) {\n\t\t\tconsole.log(e);\n\t\t}\n\n        // console.log('sensor #' + offset + ' ' + s + ': '); console.log(sensor);\n        props =  { temp     : [ 'temperature', 'celcius',    'meteo' ] , humidity : [ 'humidity',    'percentage', 'meteo' ]\n                 };\n\n        type = null;\n        for (i = 0; i < sensor.data.length; i++) {\n          type = props[sensor.data[i].name];\n          if (!!type) break;\n        }\n        if (!type) return;\n        /*\n        console.log('/device/climate/' + (sensor.protocol || 'telldus') + '/' + type[2]);\n        console.log('    uuid=teldus:' + sensor.id);\n        console.log('    name: ' + sensor.name);\n        console.log('    status: ' + (p.online === '1' ? 'present' : 'absent'));\n        console.log('    battery: ' + sensor.battery);\n        console.log('    lastSample: ' + sensor.lastUpdated * 1000);\n        console.log('    lastSample: ' + '' + formatDate(sensor.lastUpdated * 1000));\n        console.log('    info:');\n        */\n        batteryStatus = '-'\n        if (sensor.battery === '253') {\n            batteryStatus = 'ok';\n        } else if (sensor.battery === '254') {\n            batteryStatus = 'unknown';\n        } else if (sensor.battery === '255') {\n            batteryStatus = 'low battery';\n        } else {\n            batteryStatus = sensor.battery;\n        }\n\n        mqttClient.publish('common/telldus live/' + sensor.clientName + '/sensors/' + sensor.name + '/telldus id', sensor.id);\n        // mqttClient.publish('common/telldus live/' + sensor.clientName + '/sensors/' + sensor.name + '/protocol', '' + sensor.protocol);\n        // mqttClient.publish('common/telldus live/' + sensor.clientName + '/sensors/' + sensor.name + '/last update', '' + sensor.lastUpdated * 1000);\n        // mqttClient.publish('common/telldus live/' + sensor.clientName + '/sensors/' + sensor.name + '/last update nice', '' + formatDate(sensor.lastUpdated * 1000));\n        // mqttClient.publish('common/telldus live/' + sensor.clientName + '/sensors/' + sensor.name + '/ignored', '' + sensor.ignored);\n        // mqttClient.publish('common/telldus live/' + sensor.clientName + '/sensors/' + sensor.name + '/editable', '' + sensor.editable);\n        // mqttClient.publish('common/telldus live/' + sensor.clientName + '/sensors/' + sensor.name + '/status', (p.online === '1' ? 'present' : 'absent'));\n        // mqttClient.publish('common/telldus live/' + sensor.clientName + '/sensors/' + sensor.name + '/sensor id', sensor.sensorId);\n        // mqttClient.publish('common/telldus live/' + sensor.clientName + '/sensors/' + sensor.name + '/timezone offset', '' + sensor.timezoneoffset);\n        mqttClient.publish('common/telldus live/' + sensor.clientName + '/sensors/' + sensor.name + '/battery status', batteryStatus);\n        // mqttClient.publish('common/telldus live/' + sensor.clientName + '/sensors/' + sensor.name + '/mqtt last update', '' + Date.now());\n        // mqttClient.publish('common/telldus live/' + sensor.clientName + '/sensors/' + sensor.name + '/mqtt last update nice', '' + formatDate(Date.now()));\n\n        for (i = 0; i < sensor.data.length; i++) {\n          prop =  props[sensor.data[i].name];\n        //  if (prop) console.log('      ' + prop[0] + ': \"' + prop[1] + '\"');\n        }\n        // console.log('    values:');\n        for (i = 0; i < sensor.data.length; i++) {\n          prop =  props[sensor.data[i].name];\n        //  if (prop) console.log('      ' + prop[0] + ': ' + sensor.data[i].value);\n          mqttClient.publish('common/telldus live/' + sensor.clientName + '/sensors/' + sensor.name + '/data/' + prop[0] + '/value', sensor.data[i].value);\n          mqttClient.publish('common/telldus live/' + sensor.clientName + '/sensors/' + sensor.name + '/data/' + prop[0] + '/unit', prop[1]);\n        }\n        // console.log('');\n\t\tflow.set(sensor.name, sensor);\n      };\n    };\n\n    for (i = 0; i < sensors.length; i++) cloud.getSensorInfo(sensors[i], f(i, sensors[i], 'getSensorInfo'));\n\n  }).getDevices(function(err, devices) {\n    var f, i;\n\n    if (!!err) return console.log('getDevices: ' + err.message);\n\n    f = function(offset, p, s) {\n      return function(err, device) {\n        var d, type, types;\n\t\tvar oldDevice;\n\n        if (!!err) return console.log(s + ' id=' + p.id + ': ' + err.message);\n\t\t\n\t\ttry  {\n\t\t\toldDevice = flow.get(device.name)||{};\n\t\t\tif (!diff(device, oldDevice)) return ;\t\t\n\t\t}\n\t\tcatch(e) {\n\t\t\tconsole.log(e);\n\t\t}\n        // console.log('device #' + offset + ' ' + s + ': '); console.log(device);\n        types = { 'selflearning-switch' : 'onoff', 'selflearning-dimmer' : 'dimmer', 'codeswitch'          : 'onoff' };\n\n        type = null;\n        d = device.model.split(':');\n        type = types[d[0]];\n        if (!type) return;\n        /*\n        console.log('/device/switch' + '/' + (d[d.length - 1] || 'telldus') + '/' + type);\n        console.log('    uuid=teldus:' + device.id);\n        console.log('    perform: off, on');\n        console.log('    name: ' + device.name);\n        console.log('last update: ' + device.lastUpdated*1000);\n        console.log('    status: ' + (device.online === '0' ? 'absent' : device.status));\n        console.log('    info:');\n        if (type === 'dimmer') console.log('      dimmer: percentage');\n        console.log('    values:');\n        if (type === 'dimmer') console.log('      dimmer: ' + Math.round((1-(255 - device.statevalue)/255)*100) + '%');\n        console.log('');\n        */\n        mqttClient.publish('common/telldus live/' + device.client + '/devices/' + device.name + '/telldus id', device.id);\n        // mqttClient.publish('common/telldus live/' + device.client + '/devices/' + device.name + '/protocol', '' + device.protocol);\n        // mqttClient.publish('common/telldus live/' + device.client + '/devices/' + device.name + '/model', '' + device.model);\n        // mqttClient.publish('common/telldus live/' + device.client + '/devices/' + device.name + '/state', '' + device.state);\n        mqttClient.publish('common/telldus live/' + device.client + '/devices/' + device.name + '/state value', '' + device.statevalue);\n        // mqttClient.publish('common/telldus live/' + device.client + '/devices/' + device.name + '/methods', '' + device.methods);\n        mqttClient.publish('common/telldus live/' + device.client + '/devices/' + device.name + '/type', '' + type);\n        // mqttClient.publish('common/telldus live/' + device.client + '/devices/' + device.name + '/client', '' + device.client);\n        // mqttClient.publish('common/telldus live/' + device.client + '/devices/' + device.name + '/online', '' + device.online);\n        // mqttClient.publish('common/telldus live/' + device.client + '/devices/' + device.name + '/editable', '' + device.editable);\n        mqttClient.publish('common/telldus live/' + device.client + '/devices/' + device.name + '/status', '' + (device.online === '0' ? 'absent' : device.status));\n        // mqttClient.publish('common/telldus live/' + device.client + '/devices/' + device.name + '/mqtt last update', '' + Date.now());\n        // mqttClient.publish('common/telldus live/' + device.client + '/devices/' + device.name + '/mqtt last update nice', '' + formatDate(Date.now()));\n\n        /*\n        for (j = 0; j < device.parameter.length; j++) {\n          mqttClient.publish('common/telldus live/' + device.client + '/devices/' + device.name + '/data/' + device.parameter[j].name , '' + device.parameter[j].value);\n        }\n        */\n\t\t\n\t\tflow.set(device.name, device);\n      };\n    };\n\n    for (i = 0; i < devices.length; i++) {\n      if (devices[i].type === 'device') cloud.getDeviceInfo(devices[i], f(i, devices[i], 'getDeviceInfo'));\n    }\n    msg.payload = JSON.stringify(devices);\n  });\n}).on('error', function(err) {\n  console.log('background error: ' + err.message);\n});\n\n\nreturn msg;","outputs":1,"noerr":0,"x":1470,"y":700,"wires":[["c25cfbf5.3d7c98"]]},{"id":"9cb7ebe.5f9e618","type":"exec","z":"8de34dec.0311b","command":"ssh -o 'StrictHostKeyChecking=no' 'root@192.168.0.4' \"docker restart nodered\"","addpay":false,"append":"","useSpawn":"false","timer":"","oldrc":false,"name":"restart nodered containers","x":890,"y":180,"wires":[[],[],[]]},{"id":"ad4f83ae.64e72","type":"exec","z":"8de34dec.0311b","command":"ssh  -o 'StrictHostKeyChecking=no' 'root@192.168.0.4' 'service piinfo restart'","addpay":false,"append":"","useSpawn":"false","timer":"2","oldrc":false,"name":"lobo info service restart","x":530,"y":300,"wires":[[],[],[]]},{"id":"1f75a02a.fdae6","type":"inject","z":"8de34dec.0311b","name":"Trigger restart piinfo service","topic":"init","payload":"0","payloadType":"str","repeat":"","crontab":"","once":true,"onceDelay":"1","x":160,"y":300,"wires":[["ad4f83ae.64e72"]]},{"id":"9924c4fc.28b358","type":"function","z":"8de34dec.0311b","name":">90","func":"if (parseInt(msg.payload) > 90) {\n    return msg\n}\n","outputs":1,"noerr":0,"x":290,"y":180,"wires":[["9cb7ebe.5f9e618"]]},{"id":"a31dc015.5322d","type":"smooth","z":"8de34dec.0311b","name":"5 periods mean","property":"payload","action":"mean","count":"5","round":"","mult":"single","x":500,"y":60,"wires":[["87c8bf19.2b0d6"]]},{"id":"292ba371.99c9fc","type":"function","z":"8de34dec.0311b","name":"to Number","func":"msg.payload = parseInt(msg.payload);\nreturn msg ;\n","outputs":1,"noerr":0,"x":310,"y":60,"wires":[["a31dc015.5322d","945791d.10fd77"]]},{"id":"d2d57404.b89d58","type":"http request","z":"7e596646.ff51a8","name":"Telldus Key","method":"GET","ret":"txt","url":"http://192.168.0.4:5000/api/ID?uid=telldus_key","tls":"","x":310,"y":60,"wires":[["cc70cd74.e50af"]]},{"id":"aa892d91.bc8ad","type":"inject","z":"7e596646.ff51a8","name":"","topic":"init","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"onceDelay":0.1,"x":120,"y":60,"wires":[["d2d57404.b89d58","340829b8.9f53d6"]]},{"id":"340829b8.9f53d6","type":"http request","z":"7e596646.ff51a8","name":"Telldus Token","method":"GET","ret":"txt","url":"http://192.168.0.4:5000/api/ID?uid=telldus_apptoken","tls":"","x":320,"y":120,"wires":[["3ab9577.591afa8"]]},{"id":"f3f6f9dd.9437c8","type":"function","z":"7e596646.ff51a8","name":"Nodered SSH private key","func":"msg.payload = JSON.parse(msg.payload);\nif (msg.payload.status === 200){\n    msg.payload =  msg.payload.password;\n}\nreturn msg;","outputs":1,"noerr":0,"x":570,"y":180,"wires":[["cd943e50.c91e6"]]},{"id":"3ab9577.591afa8","type":"function","z":"7e596646.ff51a8","name":"token to context","func":"msg.payload = JSON.parse(msg.payload);\nif (msg.payload.status === 200){\n    flow.set('token', msg.payload.username);\n    flow.set('tokenSecret', msg.payload.password);\n}\nreturn msg ;","outputs":1,"noerr":0,"x":540,"y":120,"wires":[[]]},{"id":"f663d744.4823d8","type":"trigger","z":"7e596646.ff51a8","op1":"shutdown","op2":"{\"name\":\"NAS2Floor\",\"value\":false}","op1type":"str","op2type":"json","duration":"5","extend":false,"units":"min","reset":"","bytopic":"all","name":"","x":630,"y":1420,"wires":[["5294efa1.17fff"]]},{"id":"5294efa1.17fff","type":"switch","z":"7e596646.ff51a8","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"shutdown","vt":"str"},{"t":"eq","v":"off","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":810,"y":1420,"wires":[["d2c3507b.1f6d2"],["e4fb9005.77a35"]]},{"id":"e4fb9005.77a35","type":"function","z":"7e596646.ff51a8","name":"telldusSetOnOffDevices","func":"// Node-RED function to\n// a) list all Telldus devices (device = everything in Telldus Live except sensors)\n//\n// The code below relies on the following modules to be installed in the Node-RED environment, including being set up\n// in the functionGlobalContext section of the Node-RED settings.js config file (see last section of http://nodered.org/docs/writing-functions.html page)\n//\n// a) Telldus-Live module (https://github.com/TheThingSystem/node-telldus-live)\n//\n//\n// The function will fire one output message for each device it gets information about from Telldus Live.\n// By default the device id and name is included in the messages, but this can be customised as needed.\n//\n\n// Define Telldus Live API credentials\nvar publicKey = flow.get('publicKey');\nvar privateKey = flow.get('privateKey') ;\nvar token = flow.get('token');\nvar tokenSecret = flow.get('tokenSecret');\nvar cloud  ;\n\nvar value = msg.payload.value;\nvar deviceName = msg.payload.name;\n\n// var devices = flow.get('devices') || {};\n// var device = devices.find(d => d.id === id);\n// var device = devices.find(d => d.name === deviceName);\nvar device = flow.get(deviceName) || {};\n\nf = function(offset, p, s) {\n    return function(err, device) {\n        var d, type, types;\n\n        if (!!err) return console.log(s + ' id=' + p.id + ': ' + err.message);\n\n        console.log('device #' + offset + ' ' + s + ': '); console.log(device);\n        types = { 'selflearning-switch' : 'onoff', 'selflearning-dimmer' : 'dimmer', 'codeswitch'          : 'onoff' };\n\n        type = null;\n        d = device.model.split(':');\n        type = types[d[0]];\n        if (!type) return;\n\n        console.log('/device/switch' + '/' + (d[d.length - 1] || 'telldus') + '/' + type);\n        console.log('    uuid=teldus:' + device.id);\n        console.log('    perform: off, on');\n        console.log('    name: ' + device.name);\n        console.log('last update: ' + device.lastUpdated*1000);\n        console.log('    status: ' + (device.online === '0' ? 'absent' : device.status));\n        console.log('    info:');\n        if (type === 'dimmer') console.log('      dimmer: percentage');\n        console.log('    values:');\n        if (type === 'dimmer') console.log('      dimmer: ' + Math.round((1-(255 - device.statevalue)/255)*100) + '%');\n        console.log('');\n\n    };\n};\n\n// for (i = 0; i < devices.length; i++) {\n//   if (devices[i].type === 'device')  f(i, devices[i], 'getDeviceInfo');\n// }\n    if (device.type === 'device') f(0, device, 'getDeviceInfo'); \n\n\n// Create and log into new TelldusAPI object\ncloud = new context.global.telldusLive.TelldusAPI({ publicKey  : publicKey, privateKey : privateKey });\n\ncloud.login(token, tokenSecret, function(err, user) {\n  if (!!err) return console.log('login error: ' + err.message);\n  cloud.onOffDevice(device, value, function(err, results) {\n    if(!!err) return JSON.stringify(err.message); // console.log('login error: ' + err.message);\n    msg.payload = JSON.stringify(results);\n  });\n \n}).on('error', function(err) {\n  console.log('background error: ' + err.message);\n});\n\n\nreturn msg;","outputs":1,"noerr":0,"x":1050,"y":1460,"wires":[["be74e6fc.3d9988","a8e3d4fe.d327f8"]]},{"id":"6b70452a.78bd4c","type":"switch","z":"7e596646.ff51a8","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"off","vt":"str"},{"t":"eq","v":"on","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":450,"y":1460,"wires":[["f663d744.4823d8"],["5fb74822.a12888"]]},{"id":"5fb74822.a12888","type":"function","z":"7e596646.ff51a8","name":"tdNASFormat","func":"var device = flow.get('NAS2Floor') || {};\nif (device.status !== true){\n    msg.payload = {\"name\":\"NAS2Floor\",\"value\":true};\n    return msg;\n}","outputs":1,"noerr":0,"x":620,"y":1520,"wires":[["8c5ae152.81331"]]},{"id":"8c5ae152.81331","type":"function","z":"7e596646.ff51a8","name":"telldusSetOnOffDevices","func":"// Node-RED function to\n// a) list all Telldus devices (device = everything in Telldus Live except sensors)\n//\n// The code below relies on the following modules to be installed in the Node-RED environment, including being set up\n// in the functionGlobalContext section of the Node-RED settings.js config file (see last section of http://nodered.org/docs/writing-functions.html page)\n//\n// a) Telldus-Live module (https://github.com/TheThingSystem/node-telldus-live)\n//\n//\n// The function will fire one output message for each device it gets information about from Telldus Live.\n// By default the device id and name is included in the messages, but this can be customised as needed.\n//\n\n// Define Telldus Live API credentials\nvar publicKey = flow.get('publicKey');\nvar privateKey = flow.get('privateKey') ;\nvar token = flow.get('token');\nvar tokenSecret = flow.get('tokenSecret');\nvar cloud  ;\n\nvar value = msg.payload.value;\nvar deviceName = msg.payload.name;\n\n// var devices = flow.get('devices') || {};\n// var device = devices.find(d => d.id === id);\n// var device = devices.find(d => d.name === deviceName);\nvar device = flow.get(deviceName) || {};\n\nf = function(offset, p, s) {\n    return function(err, device) {\n        var d, type, types;\n\n        if (!!err) return console.log(s + ' id=' + p.id + ': ' + err.message);\n\n        console.log('device #' + offset + ' ' + s + ': '); console.log(device);\n        types = { 'selflearning-switch' : 'onoff', 'selflearning-dimmer' : 'dimmer', 'codeswitch'          : 'onoff' };\n\n        type = null;\n        d = device.model.split(':');\n        type = types[d[0]];\n        if (!type) return;\n\n        console.log('/device/switch' + '/' + (d[d.length - 1] || 'telldus') + '/' + type);\n        console.log('    uuid=teldus:' + device.id);\n        console.log('    perform: off, on');\n        console.log('    name: ' + device.name);\n        console.log('last update: ' + device.lastUpdated*1000);\n        console.log('    status: ' + (device.online === '0' ? 'absent' : device.status));\n        console.log('    info:');\n        if (type === 'dimmer') console.log('      dimmer: percentage');\n        console.log('    values:');\n        if (type === 'dimmer') console.log('      dimmer: ' + Math.round((1-(255 - device.statevalue)/255)*100) + '%');\n        console.log('');\n\n    };\n};\n\n// for (i = 0; i < devices.length; i++) {\n//   if (devices[i].type === 'device')  f(i, devices[i], 'getDeviceInfo');\n// }\n    if (device.type === 'device') f(0, device, 'getDeviceInfo'); \n\n\n// Create and log into new TelldusAPI object\ncloud = new context.global.telldusLive.TelldusAPI({ publicKey  : publicKey, privateKey : privateKey });\n\ncloud.login(token, tokenSecret, function(err, user) {\n  if (!!err) return console.log('login error: ' + err.message);\n  cloud.onOffDevice(device, value, function(err, results) {\n    if(!!err) return JSON.stringify(err.message); // console.log('login error: ' + err.message);\n    msg.payload = JSON.stringify(results);\n  });\n \n}).on('error', function(err) {\n  console.log('background error: ' + err.message);\n});\n\n\nreturn msg;","outputs":1,"noerr":0,"x":870,"y":1520,"wires":[["a8e3d4fe.d327f8"]]},{"id":"a8e3d4fe.d327f8","type":"debug","z":"7e596646.ff51a8","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1390,"y":1480,"wires":[]},{"id":"71d99321.e926cc","type":"mqtt out","z":"e460325d.9cdbf","name":"","topic":"","qos":"0","retain":"false","broker":"e29f85d0.5a40a8","x":750,"y":480,"wires":[]},{"id":"acd24de9.6c702","type":"ui_switch","z":"e460325d.9cdbf","name":"Lampe Salon","label":"Lampe Salon","group":"c3a3bae1.621c7","order":3,"width":0,"height":0,"passthru":false,"decouple":"true","topic":"/SonOff_S5/gpio/12","style":"","onvalue":"1","onvalueType":"str","onicon":"","oncolor":"","offvalue":"0","offvalueType":"str","officon":"","offcolor":"","x":550,"y":480,"wires":[["71d99321.e926cc"]]},{"id":"b0177ce4.fde9b","type":"mqtt in","z":"e460325d.9cdbf","name":"","topic":"/SonOff_S5/relay/state","qos":"0","broker":"e29f85d0.5a40a8","x":140,"y":480,"wires":[["acd24de9.6c702"]]},{"id":"5373c691.2d2a88","type":"mqtt out","z":"e460325d.9cdbf","name":"","topic":"","qos":"0","retain":"false","broker":"e29f85d0.5a40a8","x":750,"y":620,"wires":[]},{"id":"fdf46ac8.0e8a68","type":"ui_switch","z":"e460325d.9cdbf","name":"SonOff S6","label":"SonOff S6","group":"d2db46a4.bbe668","order":4,"width":0,"height":0,"passthru":false,"decouple":"true","topic":"/SonOff_S6/gpio/12","style":"","onvalue":"1","onvalueType":"str","onicon":"","oncolor":"","offvalue":"0","offvalueType":"str","officon":"","offcolor":"","x":550,"y":620,"wires":[["5373c691.2d2a88"]]},{"id":"aba661fd.68882","type":"mqtt in","z":"e460325d.9cdbf","name":"","topic":"/SonOff_S6/relay/state","qos":"0","broker":"e29f85d0.5a40a8","x":140,"y":620,"wires":[["fdf46ac8.0e8a68"]]},{"id":"67ba48bb.c8bfd8","type":"mqtt out","z":"e460325d.9cdbf","name":"","topic":"","qos":"0","retain":"false","broker":"e29f85d0.5a40a8","x":750,"y":740,"wires":[]},{"id":"d6c6df99.66d51","type":"ui_switch","z":"e460325d.9cdbf","name":"NAS","label":"NAS","group":"2587caa.ce67a36","order":5,"width":0,"height":0,"passthru":false,"decouple":"true","topic":"/SonOff_S7/gpio/12","style":"","onvalue":"1","onvalueType":"str","onicon":"","oncolor":"","offvalue":"0","offvalueType":"str","officon":"","offcolor":"","x":530,"y":740,"wires":[["67ba48bb.c8bfd8"]]},{"id":"b6df0095.9e6c6","type":"mqtt in","z":"e460325d.9cdbf","name":"","topic":"/SonOff_S7/relay/state","qos":"0","broker":"e29f85d0.5a40a8","x":140,"y":740,"wires":[["d6c6df99.66d51"]]},{"id":"57e56640.199d28","type":"mqtt in","z":"7e596646.ff51a8","name":"","topic":"/SonOff_DTH16/sonde/Temperature","qos":"0","broker":"e29f85d0.5a40a8","x":160,"y":1580,"wires":[["91b18065.6e142","5d1c2c9e.396034"]]},{"id":"91b18065.6e142","type":"ui_chart","z":"7e596646.ff51a8","name":"","group":"8f062600.79f9f8","order":0,"width":0,"height":0,"label":"Sonde T°","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":2,"x":460,"y":1580,"wires":[[],[]]},{"id":"5d1c2c9e.396034","type":"ui_gauge","z":"7e596646.ff51a8","name":"","group":"8f062600.79f9f8","order":0,"width":0,"height":0,"gtype":"gage","title":"Sonde T°","label":"°C","format":"{{value}}","min":0,"max":"120","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":460,"y":1620,"wires":[]},{"id":"91ef9431.5916d8","type":"function","z":"7e596646.ff51a8","name":"telldusSetOnOffDevices","func":"// Node-RED function to\n// a) list all Telldus devices (device = everything in Telldus Live except sensors)\n//\n// The code below relies on the following modules to be installed in the Node-RED environment, including being set up\n// in the functionGlobalContext section of the Node-RED settings.js config file (see last section of http://nodered.org/docs/writing-functions.html page)\n//\n// a) Telldus-Live module (https://github.com/TheThingSystem/node-telldus-live)\n//\n//\n// The function will fire one output message for each device it gets information about from Telldus Live.\n// By default the device id and name is included in the messages, but this can be customised as needed.\n//\n\n// Define Telldus Live API credentials\nvar publicKey = flow.get('publicKey');\nvar privateKey = flow.get('privateKey') ;\nvar token = flow.get('token');\nvar tokenSecret = flow.get('tokenSecret');\nvar cloud  ;\n\nvar value = msg.payload.value;\nvar deviceName = msg.payload.name;\n\n// var devices = flow.get('devices') || {};\n// var device = devices.find(d => d.id === id);\n// var device = devices.find(d => d.name === deviceName);\nvar device = flow.get(deviceName) || {};\n\nf = function(offset, p, s) {\n    return function(err, device) {\n        var d, type, types;\n\n        if (!!err) return console.log(s + ' id=' + p.id + ': ' + err.message);\n\n        console.log('device #' + offset + ' ' + s + ': '); console.log(device);\n        types = { 'selflearning-switch' : 'onoff', 'selflearning-dimmer' : 'dimmer', 'codeswitch'          : 'onoff' };\n\n        type = null;\n        d = device.model.split(':');\n        type = types[d[0]];\n        if (!type) return;\n\n        console.log('/device/switch' + '/' + (d[d.length - 1] || 'telldus') + '/' + type);\n        console.log('    uuid=teldus:' + device.id);\n        console.log('    perform: off, on');\n        console.log('    name: ' + device.name);\n        console.log('last update: ' + device.lastUpdated*1000);\n        console.log('    status: ' + (device.online === '0' ? 'absent' : device.status));\n        console.log('    info:');\n        if (type === 'dimmer') console.log('      dimmer: percentage');\n        console.log('    values:');\n        if (type === 'dimmer') console.log('      dimmer: ' + Math.round((1-(255 - device.statevalue)/255)*100) + '%');\n        console.log('');\n\n    };\n};\n\n// for (i = 0; i < devices.length; i++) {\n//   if (devices[i].type === 'device')  f(i, devices[i], 'getDeviceInfo');\n// }\n    if (device.type === 'device') f(0, device, 'getDeviceInfo'); \n\n\n// Create and log into new TelldusAPI object\ncloud = new context.global.telldusLive.TelldusAPI({ publicKey  : publicKey, privateKey : privateKey });\n\ncloud.login(token, tokenSecret, function(err, user) {\n  if (!!err) return console.log('login error: ' + err.message);\n  cloud.onOffDevice(device, value, function(err, results) {\n    if(!!err) return JSON.stringify(err.message); // console.log('login error: ' + err.message);\n    msg.payload = JSON.stringify(results);\n  });\n \n}).on('error', function(err) {\n  console.log('background error: ' + err.message);\n});\n\n\nreturn msg;","outputs":1,"noerr":0,"x":690,"y":1100,"wires":[["be74e6fc.3d9988"]]},{"id":"73301ce5.5c2e34","type":"ui_switch","z":"7e596646.ff51a8","name":"","label":"Kodi Salon","group":"c3a3bae1.621c7","order":2,"width":0,"height":0,"passthru":false,"decouple":"true","topic":"","style":"","onvalue":"{\"name\":\"Kodi\",\"value\":true}","onvalueType":"json","onicon":"","oncolor":"","offvalue":"{\"name\":\"Kodi\",\"value\":false}","offvalueType":"json","officon":"","offcolor":"","x":450,"y":1100,"wires":[["91ef9431.5916d8"]]},{"id":"fdeb55a3.fb41e8","type":"function","z":"7e596646.ff51a8","name":"tdFormat","func":"var device = {\"name\": \"\", \"value\": false};\nvar s = msg.topic.split('/');\ndevice.name = s[4] ;\nif (msg.payload === 'on') {\n    device.value = true;\n} \nelse {\n    device.value = false;\n}\nmsg.payload = device;\nreturn msg;","outputs":1,"noerr":0,"x":280,"y":1100,"wires":[["73301ce5.5c2e34"]]},{"id":"aa31ebb4.800f68","type":"mqtt in","z":"7e596646.ff51a8","name":"Kodi Salon","topic":"common/telldus live/54242/devices/Kodi/status","qos":"0","broker":"e29f85d0.5a40a8","x":80,"y":1100,"wires":[["fdeb55a3.fb41e8"]]},{"id":"f05f6404.9cc7f8","type":"function","z":"7e596646.ff51a8","name":"telldusSetOnOffDevices","func":"// Node-RED function to\n// a) list all Telldus devices (device = everything in Telldus Live except sensors)\n//\n// The code below relies on the following modules to be installed in the Node-RED environment, including being set up\n// in the functionGlobalContext section of the Node-RED settings.js config file (see last section of http://nodered.org/docs/writing-functions.html page)\n//\n// a) Telldus-Live module (https://github.com/TheThingSystem/node-telldus-live)\n//\n//\n// The function will fire one output message for each device it gets information about from Telldus Live.\n// By default the device id and name is included in the messages, but this can be customised as needed.\n//\n\n// Define Telldus Live API credentials\nvar publicKey = flow.get('publicKey');\nvar privateKey = flow.get('privateKey') ;\nvar token = flow.get('token');\nvar tokenSecret = flow.get('tokenSecret');\nvar cloud  ;\n\nvar value = msg.payload.value;\nvar deviceName = msg.payload.name;\n\n// var devices = flow.get('devices') || {};\n// var device = devices.find(d => d.id === id);\n// var device = devices.find(d => d.name === deviceName);\nvar device = flow.get(deviceName) || {};\n\nf = function(offset, p, s) {\n    return function(err, device) {\n        var d, type, types;\n\n        if (!!err) return console.log(s + ' id=' + p.id + ': ' + err.message);\n\n        console.log('device #' + offset + ' ' + s + ': '); console.log(device);\n        types = { 'selflearning-switch' : 'onoff', 'selflearning-dimmer' : 'dimmer', 'codeswitch'          : 'onoff' };\n\n        type = null;\n        d = device.model.split(':');\n        type = types[d[0]];\n        if (!type) return;\n\n        console.log('/device/switch' + '/' + (d[d.length - 1] || 'telldus') + '/' + type);\n        console.log('    uuid=teldus:' + device.id);\n        console.log('    perform: off, on');\n        console.log('    name: ' + device.name);\n        console.log('last update: ' + device.lastUpdated*1000);\n        console.log('    status: ' + (device.online === '0' ? 'absent' : device.status));\n        console.log('    info:');\n        if (type === 'dimmer') console.log('      dimmer: percentage');\n        console.log('    values:');\n        if (type === 'dimmer') console.log('      dimmer: ' + Math.round((1-(255 - device.statevalue)/255)*100) + '%');\n        console.log('');\n\n    };\n};\n\n// for (i = 0; i < devices.length; i++) {\n//   if (devices[i].type === 'device')  f(i, devices[i], 'getDeviceInfo');\n// }\n    if (device.type === 'device') f(0, device, 'getDeviceInfo'); \n\n\n// Create and log into new TelldusAPI object\ncloud = new context.global.telldusLive.TelldusAPI({ publicKey  : publicKey, privateKey : privateKey });\n\ncloud.login(token, tokenSecret, function(err, user) {\n  if (!!err) return console.log('login error: ' + err.message);\n  cloud.onOffDevice(device, value, function(err, results) {\n    if(!!err) return JSON.stringify(err.message); // console.log('login error: ' + err.message);\n    msg.payload = JSON.stringify(results);\n  });\n \n}).on('error', function(err) {\n  console.log('background error: ' + err.message);\n});\n\n\nreturn msg;","outputs":1,"noerr":0,"x":870,"y":1320,"wires":[["be74e6fc.3d9988"]]},{"id":"b032ca5a.9f17c8","type":"ui_switch","z":"7e596646.ff51a8","name":"","label":"RPI","group":"2587caa.ce67a36","order":2,"width":0,"height":0,"passthru":false,"decouple":"true","topic":"","style":"","onvalue":"{\"name\":\"RPI\",\"value\":true}","onvalueType":"json","onicon":"","oncolor":"","offvalue":"{\"name\":\"RPI\",\"value\":false}","offvalueType":"json","officon":"","offcolor":"","x":450,"y":1320,"wires":[["f05f6404.9cc7f8"]]},{"id":"6693c36c.4a488c","type":"function","z":"7e596646.ff51a8","name":"tdFormat","func":"var device = {\"name\": \"\", \"value\": false};\nvar s = msg.topic.split('/');\ndevice.name = s[4] ;\nif (msg.payload === 'on') {\n    device.value = true;\n} \nelse {\n    device.value = false;\n}\nmsg.payload = device;\nreturn msg;","outputs":1,"noerr":0,"x":280,"y":1320,"wires":[["b032ca5a.9f17c8"]]},{"id":"f8262877.9f4cf8","type":"mqtt in","z":"7e596646.ff51a8","name":"RPI 2 Floor","topic":"common/telldus live/54242/devices/RPI/status","qos":"0","broker":"e29f85d0.5a40a8","x":90,"y":1320,"wires":[["6693c36c.4a488c"]]},{"id":"c25cfbf5.3d7c98","type":"debug","z":"7e596646.ff51a8","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":1670,"y":700,"wires":[]},{"id":"fe3c0bb8.2a3ba8","type":"mqtt in","z":"8de34dec.0311b","name":"","topic":"pignouf/CPU%","qos":"1","broker":"e29f85d0.5a40a8","x":120,"y":560,"wires":[["31610347.6ec88c","b3f0af31.2b254"]]},{"id":"a9f686f9.2f0b48","type":"ui_chart","z":"8de34dec.0311b","name":"","group":"b8efdba7.a14d98","order":1,"width":0,"height":0,"label":"CPU%","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"colors":["#1f77b4","#ff7f0e","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":2,"x":710,"y":540,"wires":[[],[]]},{"id":"31610347.6ec88c","type":"ui_gauge","z":"8de34dec.0311b","name":"","group":"6be74572.49a4dc","order":1,"width":0,"height":0,"gtype":"gage","title":"CPU%","label":"%","format":"{{value}}","min":0,"max":"100","colors":["#00ff00","#e6e600","#ca3838"],"seg1":"50","seg2":"75","x":310,"y":580,"wires":[]},{"id":"901a43e3.46fcc","type":"mqtt in","z":"8de34dec.0311b","name":"","topic":"pignouf/freeRAM%","qos":"1","broker":"e29f85d0.5a40a8","x":130,"y":640,"wires":[["5ef0bbfd.da1cf4","3f9b7f2a.f8c5d"]]},{"id":"5ef0bbfd.da1cf4","type":"ui_chart","z":"8de34dec.0311b","name":"","group":"b8efdba7.a14d98","order":2,"width":0,"height":0,"label":"free MEM%","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"0","ymax":"100","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":2,"x":530,"y":640,"wires":[[],[]]},{"id":"3f9b7f2a.f8c5d","type":"ui_gauge","z":"8de34dec.0311b","name":"","group":"6be74572.49a4dc","order":1,"width":0,"height":0,"gtype":"gage","title":"free MEM%","label":"%","format":"{{value}}","min":0,"max":"100","colors":["#ff0000","#e6e600","#00ff00"],"seg1":"30","seg2":"66","x":330,"y":640,"wires":[]},{"id":"908b25a8.083da8","type":"mqtt in","z":"8de34dec.0311b","name":"","topic":"pignouf/temperature","qos":"1","broker":"e29f85d0.5a40a8","x":130,"y":700,"wires":[["2eb5997.5ff8966","5a238bdb.1b1004"]]},{"id":"2eb5997.5ff8966","type":"ui_gauge","z":"8de34dec.0311b","name":"","group":"6be74572.49a4dc","order":1,"width":0,"height":0,"gtype":"gage","title":"temperature","label":"°C","format":"{{value}}","min":"20","max":"80","colors":["#00ff00","#e6e600","#ca3838"],"seg1":"60","seg2":"75","x":330,"y":700,"wires":[]},{"id":"5a238bdb.1b1004","type":"ui_chart","z":"8de34dec.0311b","name":"","group":"b8efdba7.a14d98","order":3,"width":0,"height":0,"label":"temperature","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"20","ymax":"80","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":2,"x":530,"y":700,"wires":[[],[]]},{"id":"fd0824ac.d9ee48","type":"exec","z":"8de34dec.0311b","command":"ssh -o 'StrictHostKeyChecking=no' 'root@192.168.0.5' 'service piinfo restart'","addpay":false,"append":"","useSpawn":"false","timer":"2","oldrc":false,"name":"pignouf info service restart","x":580,"y":760,"wires":[[],[],[]]},{"id":"dbf6cc5.5026a3","type":"inject","z":"8de34dec.0311b","name":"Trigger restart piinfo service","topic":"init","payload":"0","payloadType":"str","repeat":"","crontab":"","once":true,"onceDelay":"1","x":180,"y":760,"wires":[["fd0824ac.d9ee48"]]},{"id":"d32f1aa5.34cdf8","type":"smooth","z":"8de34dec.0311b","name":"5 periods mean","property":"payload","action":"mean","count":"5","round":"","mult":"single","x":540,"y":540,"wires":[["a9f686f9.2f0b48"]]},{"id":"b3f0af31.2b254","type":"function","z":"8de34dec.0311b","name":"to Number","func":"msg.payload = parseInt(msg.payload);\nreturn msg ;\n","outputs":1,"noerr":0,"x":330,"y":540,"wires":[["d32f1aa5.34cdf8"]]},{"id":"25d0e841.ae02f8","type":"inject","z":"e460325d.9cdbf","name":"Test SonOff_B4","topic":"","payload":"SonOff_B4","payloadType":"str","repeat":"30","crontab":"","once":false,"onceDelay":0.1,"x":150,"y":920,"wires":[["4978d1eb.b0083"]]},{"id":"4978d1eb.b0083","type":"function","z":"e460325d.9cdbf","name":"isOnline","func":"var esps = global.get(\"espList\") || {};\nvar name = msg.payload;\nvar esp = esps[name] || {};\nif (esp.name === name) {\n    var deltaDate =  new Date().valueOf() - esp.lastDate.valueOf();\n    if (deltaDate < 60000) {\n        msg.payload = 'online';\n    }\n    else {\n        msg.payload = 'offline'\n    }\n}\nelse {\n    msg.payload = name + ' undefined';\n}\nreturn msg;","outputs":1,"noerr":0,"x":360,"y":920,"wires":[["1dc18a2d.e95f16"]]},{"id":"1dc18a2d.e95f16","type":"ui_switch","z":"e460325d.9cdbf","name":"SonOff_B4","label":"SonOff_B4","group":"1e881ccb.0c8923","order":0,"width":0,"height":0,"passthru":false,"decouple":"true","topic":"","style":"","onvalue":"online","onvalueType":"str","onicon":"done","oncolor":"#3FADB5","offvalue":"offline","offvalueType":"str","officon":"error","offcolor":"#E2D96E","x":590,"y":920,"wires":[[]]},{"id":"6b0c3ceb.734854","type":"inject","z":"e460325d.9cdbf","name":"SonOff_DTH16","topic":"","payload":"SonOff_DTH16","payloadType":"str","repeat":"30","crontab":"","once":false,"onceDelay":0.1,"x":140,"y":980,"wires":[["1b2a2b71.ba3445"]]},{"id":"1b2a2b71.ba3445","type":"function","z":"e460325d.9cdbf","name":"isOnline","func":"var esps = global.get(\"espList\") || {};\nvar name = msg.payload;\nvar esp = esps[name] || {};\nif (esp.name === name) {\n    var deltaDate =  new Date().valueOf() - esp.lastDate.valueOf();\n    if (deltaDate < 60000) {\n        msg.payload = 'online';\n    }\n    else {\n        msg.payload = 'offline'\n    }\n}\nelse {\n    msg.payload = name + ' undefined';\n}\nreturn msg;","outputs":1,"noerr":0,"x":360,"y":980,"wires":[["f5eb6ed0.8d1d7"]]},{"id":"f5eb6ed0.8d1d7","type":"ui_switch","z":"e460325d.9cdbf","name":"SonOff_DHT16","label":"SonOff_DHT16","group":"1e881ccb.0c8923","order":0,"width":0,"height":0,"passthru":false,"decouple":"true","topic":"","style":"","onvalue":"online","onvalueType":"str","onicon":"done","oncolor":"#3FADB5","offvalue":"offline","offvalueType":"str","officon":"error","offcolor":"#E2D96E","x":600,"y":980,"wires":[[]]},{"id":"6ea0ed7a.445384","type":"inject","z":"e460325d.9cdbf","name":"Test SonOff_S5","topic":"","payload":"SonOff_S5","payloadType":"str","repeat":"30","crontab":"","once":false,"onceDelay":0.1,"x":150,"y":1040,"wires":[["5e192ccb.cc4154"]]},{"id":"5e192ccb.cc4154","type":"function","z":"e460325d.9cdbf","name":"isOnline","func":"var esps = global.get(\"espList\") || {};\nvar name = msg.payload;\nvar esp = esps[name] || {};\nif (esp.name === name) {\n    var deltaDate =  new Date().valueOf() - esp.lastDate.valueOf();\n    if (deltaDate < 60000) {\n        msg.payload = 'online';\n    }\n    else {\n        msg.payload = 'offline'\n    }\n}\nelse {\n    msg.payload = name + ' undefined';\n}\nreturn msg;","outputs":1,"noerr":0,"x":370,"y":1040,"wires":[["5ff6f32d.6c389c"]]},{"id":"5ff6f32d.6c389c","type":"ui_switch","z":"e460325d.9cdbf","name":"SonOff_S5","label":"SonOff_S5","group":"1e881ccb.0c8923","order":0,"width":0,"height":0,"passthru":false,"decouple":"true","topic":"","style":"","onvalue":"online","onvalueType":"str","onicon":"done","oncolor":"#3FADB5","offvalue":"offline","offvalueType":"str","officon":"error","offcolor":"#E2D96E","x":590,"y":1040,"wires":[[]]},{"id":"73cd0bcd.1489c4","type":"inject","z":"e460325d.9cdbf","name":"Test SonOff_S6","topic":"","payload":"SonOff_S6","payloadType":"str","repeat":"30","crontab":"","once":false,"onceDelay":0.1,"x":150,"y":1100,"wires":[["8cc35129.3fe15"]]},{"id":"8cc35129.3fe15","type":"function","z":"e460325d.9cdbf","name":"isOnline","func":"var esps = global.get(\"espList\") || {};\nvar name = msg.payload;\nvar esp = esps[name] || {};\nif (esp.name === name) {\n    var deltaDate =  new Date().valueOf() - esp.lastDate.valueOf();\n    if (deltaDate < 60000) {\n        msg.payload = 'online';\n    }\n    else {\n        msg.payload = 'offline'\n    }\n}\nelse {\n    msg.payload = name + ' undefined';\n}\nreturn msg;","outputs":1,"noerr":0,"x":370,"y":1100,"wires":[["9c2f3907.ba2378"]]},{"id":"9c2f3907.ba2378","type":"ui_switch","z":"e460325d.9cdbf","name":"SonOff_S6","label":"SonOff_S6","group":"1e881ccb.0c8923","order":0,"width":0,"height":0,"passthru":false,"decouple":"true","topic":"","style":"","onvalue":"online","onvalueType":"str","onicon":"done","oncolor":"#3FADB5","offvalue":"offline","offvalueType":"str","officon":"error","offcolor":"#E2D96E","x":590,"y":1100,"wires":[[]]},{"id":"aa5a400.e8b3dc","type":"inject","z":"e460325d.9cdbf","name":"Test SonOff_S7","topic":"","payload":"SonOff_S7","payloadType":"str","repeat":"30","crontab":"","once":false,"onceDelay":0.1,"x":150,"y":1160,"wires":[["d758b0d5.26943"]]},{"id":"d758b0d5.26943","type":"function","z":"e460325d.9cdbf","name":"isOnline","func":"var esps = global.get(\"espList\") || {};\nvar name = msg.payload;\nvar esp = esps[name] || {};\nif (esp.name === name) {\n    var deltaDate =  new Date().valueOf() - esp.lastDate.valueOf();\n    if (deltaDate < 60000) {\n        msg.payload = 'online';\n    }\n    else {\n        msg.payload = 'offline'\n    }\n}\nelse {\n    msg.payload = name + ' undefined';\n}\nreturn msg;","outputs":1,"noerr":0,"x":370,"y":1160,"wires":[["133d5e80.5e4042"]]},{"id":"133d5e80.5e4042","type":"ui_switch","z":"e460325d.9cdbf","name":"SonOff_S7","label":"SonOff_S7","group":"1e881ccb.0c8923","order":0,"width":0,"height":0,"passthru":false,"decouple":"true","topic":"","style":"","onvalue":"online","onvalueType":"str","onicon":"done","oncolor":"#3FADB5","offvalue":"offline","offvalueType":"str","officon":"error","offcolor":"#E2D96E","x":590,"y":1160,"wires":[[]]},{"id":"78f18757.8753e8","type":"ui_slider","z":"e85d4797.c0ff2","name":"","label":"Servo (0-180°)","group":"8f062600.79f9f8","order":0,"width":0,"height":0,"passthru":true,"topic":"/espdev/cmd","min":0,"max":"180","step":"1","x":100,"y":40,"wires":[["7dfcbcaa.a88314"]]},{"id":"c9d30781.f5fba8","type":"mqtt out","z":"e85d4797.c0ff2","name":"","topic":"","qos":"","retain":"","broker":"e29f85d0.5a40a8","x":490,"y":40,"wires":[]},{"id":"7dfcbcaa.a88314","type":"function","z":"e85d4797.c0ff2","name":"servo1 on GPIO5","func":"msg.payload = \"Servo,1,5,\" + msg.payload;\nreturn msg;","outputs":1,"noerr":0,"x":310,"y":40,"wires":[["c9d30781.f5fba8"]]},{"id":"6a1e037.18fd1fc","type":"inject","z":"e460325d.9cdbf","name":"Get relay state SonOff_S7","topic":"/SonOff_S7/cmd","payload":"Status,GPIO,12","payloadType":"str","repeat":"43200","crontab":"","once":true,"onceDelay":"3","x":180,"y":1260,"wires":[["ca4b49c3.189078"]]},{"id":"ca4b49c3.189078","type":"mqtt out","z":"e460325d.9cdbf","name":"","topic":"","qos":"","retain":"","broker":"e29f85d0.5a40a8","x":430,"y":1260,"wires":[]},{"id":"6c75554f.b7527c","type":"mqtt in","z":"e460325d.9cdbf","name":"SonOff_S7 switch Status","topic":"/SonOff_S7/status","qos":"0","broker":"e29f85d0.5a40a8","x":150,"y":800,"wires":[["7e028a5e.033d74"]]},{"id":"7e028a5e.033d74","type":"function","z":"e460325d.9cdbf","name":"GetState","func":"msg.payload = JSON.parse(msg.payload);\nvar state;\nstate = msg.payload.state.toString();\nmsg.payload=state;\nreturn msg;","outputs":1,"noerr":0,"x":360,"y":800,"wires":[["d6c6df99.66d51"]]},{"id":"6f08378e.594f68","type":"udp in","z":"e460325d.9cdbf","name":"esp discovery","iface":"","port":"9090","ipv":"udp4","multicast":"false","group":"","datatype":"buffer","x":110,"y":120,"wires":[["4a853929.6d2d68"]]},{"id":"c820e944.0d9a98","type":"debug","z":"e460325d.9cdbf","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":770,"y":120,"wires":[]},{"id":"4a853929.6d2d68","type":"function","z":"e460325d.9cdbf","name":"getNameAndIP","func":"var esps = global.get(\"espList\") || {};\n\nvar buffer = msg.payload;\nvar esp = {};\nvar ip;\nvar ename;\nvar now = new Date(); // .valueOf();\n\nip = buffer[8].toString() + '.' + buffer[9].toString() + '.' +buffer[10].toString() + '.' +buffer[11].toString() \nename = buffer.toString('utf8', 15, 39).replace(/\\0/g, '');\n\nesp.ip = ip;\nesp.name = ename;\nesp.lastDate = now;\nesps[ename] = esp;\nglobal.set(\"espList\", esps);\n\nmsg.payload = esp;\n// console.log(context.espList)\nreturn msg;","outputs":1,"noerr":0,"x":360,"y":120,"wires":[["c820e944.0d9a98"]]},{"id":"df3276d9.6c5a48","type":"ui_switch","z":"e85d4797.c0ff2","name":"ESPdev LED","label":"ESPdev LED","group":"8f062600.79f9f8","order":0,"width":0,"height":0,"passthru":false,"decouple":"true","topic":"/espdev/gpio/2","style":"","onvalue":"0","onvalueType":"str","onicon":"","oncolor":"","offvalue":"1","offvalueType":"str","officon":"","offcolor":"","x":290,"y":120,"wires":[["6a391015.c3539"]]},{"id":"6a391015.c3539","type":"mqtt out","z":"e85d4797.c0ff2","name":"","topic":"","qos":"0","retain":"false","broker":"e29f85d0.5a40a8","x":450,"y":120,"wires":[]},{"id":"b453e810.1dc118","type":"mqtt in","z":"e85d4797.c0ff2","name":"","topic":"/espdev/led/State","qos":"0","broker":"e29f85d0.5a40a8","x":100,"y":120,"wires":[["df3276d9.6c5a48"]]},{"id":"c3b6df3b.e1429","type":"inject","z":"e460325d.9cdbf","name":"Get relay state SonOff_S6","topic":"/SonOff_S6/cmd","payload":"Status,GPIO,12","payloadType":"str","repeat":"43200","crontab":"","once":false,"onceDelay":"4","x":180,"y":1320,"wires":[["2df4d61d.3619da"]]},{"id":"2df4d61d.3619da","type":"mqtt out","z":"e460325d.9cdbf","name":"","topic":"","qos":"","retain":"","broker":"e29f85d0.5a40a8","x":430,"y":1320,"wires":[]},{"id":"fa1d9fbc.53f26","type":"inject","z":"e460325d.9cdbf","name":"Get relay state SonOff_S5","topic":"/SonOff_S5/cmd","payload":"Status,GPIO,12","payloadType":"str","repeat":"43200","crontab":"","once":false,"onceDelay":"6","x":180,"y":1380,"wires":[["b8b5289a.8d06f8"]]},{"id":"b8b5289a.8d06f8","type":"mqtt out","z":"e460325d.9cdbf","name":"","topic":"","qos":"","retain":"","broker":"e29f85d0.5a40a8","x":430,"y":1380,"wires":[]},{"id":"4cadd74e.741708","type":"inject","z":"e460325d.9cdbf","name":"Get relay state SonOff_B4","topic":"/SonOff_B4/cmd","payload":"Status,GPIO,12","payloadType":"str","repeat":"43200","crontab":"","once":false,"onceDelay":"4","x":180,"y":1440,"wires":[["8424b289.7df23"]]},{"id":"8424b289.7df23","type":"mqtt out","z":"e460325d.9cdbf","name":"","topic":"","qos":"","retain":"","broker":"e29f85d0.5a40a8","x":430,"y":1440,"wires":[]},{"id":"d9313135.67faf","type":"inject","z":"e460325d.9cdbf","name":"Get relay state SonOff_DTH16","topic":"/SonOff_DTH16/cmd","payload":"Status,GPIO,12","payloadType":"str","repeat":"720","crontab":"","once":false,"onceDelay":"5","x":190,"y":1500,"wires":[["c974c0ac.3da33"]]},{"id":"c974c0ac.3da33","type":"mqtt out","z":"e460325d.9cdbf","name":"","topic":"","qos":"","retain":"","broker":"e29f85d0.5a40a8","x":430,"y":1500,"wires":[]},{"id":"c7453141.b879b","type":"mqtt in","z":"e460325d.9cdbf","name":"SonOff_S6 switch Status","topic":"/SonOff_S6/status","qos":"0","broker":"e29f85d0.5a40a8","x":150,"y":680,"wires":[["46821b9c.276074"]]},{"id":"46821b9c.276074","type":"function","z":"e460325d.9cdbf","name":"GetState","func":"msg.payload = JSON.parse(msg.payload);\nvar state;\nstate = msg.payload.state.toString();\nmsg.payload=state;\nreturn msg;","outputs":1,"noerr":0,"x":360,"y":680,"wires":[["fdf46ac8.0e8a68"]]},{"id":"23e8f780.444198","type":"mqtt in","z":"e460325d.9cdbf","name":"SonOff_S5 switch Status","topic":"/SonOff_S5/status","qos":"0","broker":"e29f85d0.5a40a8","x":150,"y":560,"wires":[["e37eaf7e.b6a7f"]]},{"id":"e37eaf7e.b6a7f","type":"function","z":"e460325d.9cdbf","name":"GetState","func":"msg.payload = JSON.parse(msg.payload);\nvar state;\nstate = msg.payload.state.toString();\nmsg.payload=state;\nreturn msg;","outputs":1,"noerr":0,"x":360,"y":560,"wires":[["acd24de9.6c702"]]},{"id":"5d5489d9.ed53c8","type":"mqtt in","z":"e460325d.9cdbf","name":"SonOff_DTH16 switch Status","topic":"/SonOff_DTH16/status","qos":"0","broker":"e29f85d0.5a40a8","x":160,"y":420,"wires":[["f0bb92e8.f72b5"]]},{"id":"f0bb92e8.f72b5","type":"function","z":"e460325d.9cdbf","name":"GetState","func":"msg.payload = JSON.parse(msg.payload);\nvar state;\nstate = msg.payload.state.toString();\nmsg.payload=state;\nreturn msg;","outputs":1,"noerr":0,"x":360,"y":420,"wires":[["a69ff7f6.aff608"]]},{"id":"ac6b8430.dd8ab8","type":"mqtt in","z":"e460325d.9cdbf","name":"SonOff_B4 switch Status","topic":"/SonOff_B4/status","qos":"0","broker":"e29f85d0.5a40a8","x":150,"y":280,"wires":[["88861a42.315508"]]},{"id":"88861a42.315508","type":"function","z":"e460325d.9cdbf","name":"GetState","func":"msg.payload = JSON.parse(msg.payload);\nvar state;\nstate = msg.payload.state.toString();\nmsg.payload=state;\nreturn msg;","outputs":1,"noerr":0,"x":360,"y":280,"wires":[["cace9f4.c8f4f6"]]},{"id":"c47bffac.d4e9e","type":"inject","z":"e460325d.9cdbf","name":"Discover Tellsticknet device","topic":"init","payload":"[68]","payloadType":"bin","repeat":"300","crontab":"","once":true,"onceDelay":"5","x":180,"y":1580,"wires":[["292bb11a.a69f9e"]]},{"id":"6a2c47b3.8c0228","type":"udp in","z":"e460325d.9cdbf","name":"","iface":"","port":"30303","ipv":"udp4","multicast":"false","group":"255.255.255.0","datatype":"utf8","x":120,"y":1640,"wires":[["60aa250c.a6674c"]]},{"id":"292bb11a.a69f9e","type":"udp out","z":"e460325d.9cdbf","name":"","addr":"192.168.0.52","iface":"","port":"30303","ipv":"udp4","outport":"","base64":false,"multicast":"false","x":490,"y":1580,"wires":[]},{"id":"60aa250c.a6674c","type":"function","z":"e460325d.9cdbf","name":"isOnline","func":"var s = msg.payload;\nif (s.indexOf('TellStickNet') !== -1) {\n    msg.payload = 'online';\n}\nelse {\n    msg.payload = 'offline';\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":280,"y":1640,"wires":[["5f95aa7b.6cebe4"]]},{"id":"5f95aa7b.6cebe4","type":"ui_switch","z":"e460325d.9cdbf","name":"TellStick Net","label":"TellStick Net","group":"1e881ccb.0c8923","order":0,"width":0,"height":0,"passthru":false,"decouple":"true","topic":"","style":"","onvalue":"online","onvalueType":"str","onicon":"done","oncolor":"#3FADB5","offvalue":"offline","offvalueType":"str","officon":"error","offcolor":"#E2D96E","x":470,"y":1640,"wires":[[]]},{"id":"64bc3c32.7e5f04","type":"mqtt in","z":"8de34dec.0311b","name":"","topic":"sushi/CPU%","qos":"1","broker":"e29f85d0.5a40a8","x":110,"y":920,"wires":[["a0421c01.59615","e4debfc4.148e"]]},{"id":"5b2fcea.9d6d23","type":"ui_chart","z":"8de34dec.0311b","name":"","group":"ac6c0ae3.4fc7c8","order":1,"width":0,"height":0,"label":"CPU%","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"colors":["#1f77b4","#ff7f0e","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":2,"x":670,"y":880,"wires":[[],[]]},{"id":"a0421c01.59615","type":"ui_gauge","z":"8de34dec.0311b","name":"","group":"7aecf674.054878","order":1,"width":0,"height":0,"gtype":"gage","title":"CPU%","label":"%","format":"{{value}}","min":0,"max":"100","colors":["#00ff00","#e6e600","#ca3838"],"seg1":"50","seg2":"75","x":310,"y":920,"wires":[]},{"id":"a26c293.f478cd8","type":"mqtt in","z":"8de34dec.0311b","name":"","topic":"sushi/freeRAM%","qos":"1","broker":"e29f85d0.5a40a8","x":120,"y":980,"wires":[["fa4a9096.02cf8","748ca2f0.594b3c"]]},{"id":"fa4a9096.02cf8","type":"ui_chart","z":"8de34dec.0311b","name":"","group":"ac6c0ae3.4fc7c8","order":2,"width":0,"height":0,"label":"free MEM%","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"0","ymax":"100","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":2,"x":510,"y":980,"wires":[[],[]]},{"id":"748ca2f0.594b3c","type":"ui_gauge","z":"8de34dec.0311b","name":"","group":"7aecf674.054878","order":1,"width":0,"height":0,"gtype":"gage","title":"free MEM%","label":"%","format":"{{value}}","min":0,"max":"100","colors":["#ff0000","#e6e600","#00ff00"],"seg1":"30","seg2":"66","x":330,"y":980,"wires":[]},{"id":"2a9c6e9f.7b0232","type":"mqtt in","z":"8de34dec.0311b","name":"","topic":"sushi/temperature","qos":"1","broker":"e29f85d0.5a40a8","x":130,"y":1040,"wires":[["6450ca63.edc2a4","bf0ec6fb.80c7e8"]]},{"id":"6450ca63.edc2a4","type":"ui_gauge","z":"8de34dec.0311b","name":"","group":"7aecf674.054878","order":1,"width":0,"height":0,"gtype":"gage","title":"temperature","label":"°C","format":"{{value}}","min":"20","max":"80","colors":["#00ff00","#e6e600","#ca3838"],"seg1":"60","seg2":"75","x":330,"y":1040,"wires":[]},{"id":"bf0ec6fb.80c7e8","type":"ui_chart","z":"8de34dec.0311b","name":"","group":"ac6c0ae3.4fc7c8","order":3,"width":0,"height":0,"label":"temperature","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"20","ymax":"80","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":2,"x":510,"y":1040,"wires":[[],[]]},{"id":"dde246cf.56ab48","type":"smooth","z":"8de34dec.0311b","name":"","property":"payload","action":"mean","count":"5","round":"","mult":"single","x":500,"y":880,"wires":[["5b2fcea.9d6d23"]]},{"id":"e4debfc4.148e","type":"function","z":"8de34dec.0311b","name":"to Number","func":"msg.payload = parseInt(msg.payload);\nreturn msg ;\n","outputs":1,"noerr":0,"x":330,"y":880,"wires":[["dde246cf.56ab48"]]},{"id":"eb3df543.65ece8","type":"inject","z":"e460325d.9cdbf","name":"","topic":"reboot","payload":"","payloadType":"str","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":150,"y":1820,"wires":[["25fcbf7b.2cd18"]]},{"id":"25fcbf7b.2cd18","type":"mqtt out","z":"e460325d.9cdbf","name":"","topic":"/SonOff_B4/cmd","qos":"","retain":"","broker":"e29f85d0.5a40a8","x":400,"y":1820,"wires":[]},{"id":"8cc4bcd1.94814","type":"mqtt in","z":"7e596646.ff51a8","name":"UPS","topic":"/UPS/state","qos":"2","broker":"e29f85d0.5a40a8","x":70,"y":1720,"wires":[["134cbb10.3cdd95"]]},{"id":"4118d849.bd8448","type":"ui_text","z":"7e596646.ff51a8","group":"2587caa.ce67a36","order":0,"width":0,"height":0,"name":"","label":"UPS Status","format":"{{msg.payload.ups_status}}","layout":"row-spread","x":390,"y":1720,"wires":[]},{"id":"53062304.2a370c","type":"mqtt in","z":"7e596646.ff51a8","name":"UPS alert","topic":"/UPS/status","qos":"2","broker":"e29f85d0.5a40a8","x":180,"y":1660,"wires":[["4118d849.bd8448","65092d79.135e54"]]},{"id":"134cbb10.3cdd95","type":"json","z":"7e596646.ff51a8","name":"","property":"payload","action":"","pretty":false,"x":190,"y":1720,"wires":[["4118d849.bd8448","8f7c4d2a.8fa94","d5aa8c41.aab9a","8ff68891.f60cb8","b3f0e576.3b72e8","8f63f3cd.e992f","c348816f.5a7c3","1cb3fb28.b27d35","2cbac483.c557ac","1079ed21.7a6083","65092d79.135e54"]]},{"id":"e07594b6.3b2d58","type":"exec","z":"7e596646.ff51a8","command":"ssh -o 'StrictHostKeyChecking=no' 'root@192.168.0.4' '/etc/nut/startUPS.sh'","addpay":false,"append":"","useSpawn":"false","timer":"","oldrc":false,"name":"Restart UPS driver","x":370,"y":2160,"wires":[[],[],[]]},{"id":"1ca28b2f.6bb055","type":"ui_button","z":"7e596646.ff51a8","name":"Restart UPS drv","group":"1486bc1b.577fd4","order":5,"width":0,"height":0,"passthru":false,"label":"Restart UPS drv","color":"","bgcolor":"","icon":"","payload":"","payloadType":"str","topic":"","x":120,"y":2160,"wires":[["e07594b6.3b2d58"]]},{"id":"2b2d2193.3d4afe","type":"exec","z":"7e596646.ff51a8","command":"ssh -o 'StrictHostKeyChecking=no' 'root@192.168.0.4' '/etc/nut/upsmon.sh'","addpay":false,"append":"","useSpawn":"false","timer":"","oldrc":false,"name":"Send UPS status","x":370,"y":2218,"wires":[["48ecf5e.252b30c"],["48ecf5e.252b30c"],["48ecf5e.252b30c"]]},{"id":"a407a495.d71a68","type":"ui_button","z":"7e596646.ff51a8","name":"Refresh UPS state","group":"1486bc1b.577fd4","order":4,"width":0,"height":0,"passthru":false,"label":"Refresh UPS state","color":"","bgcolor":"","icon":"","payload":"true","payloadType":"bool","topic":"","x":130,"y":2220,"wires":[["2b2d2193.3d4afe"]]},{"id":"8ff68891.f60cb8","type":"ui_gauge","z":"7e596646.ff51a8","name":"","group":"1486bc1b.577fd4","order":2,"width":0,"height":0,"gtype":"donut","title":"Load (%)","label":"%","format":"{{msg.payload.ups_load}}","min":0,"max":"100","colors":["#00b500","#e6e600","#ca3838"],"seg1":"60","seg2":"80","x":380,"y":1760,"wires":[]},{"id":"f659ef80.cff61","type":"ui_chart","z":"7e596646.ff51a8","name":"","group":"1486bc1b.577fd4","order":3,"width":0,"height":0,"label":"Load (%)","chartType":"line","legend":"false","xformat":"HH:mm","interpolate":"linear","nodata":"","dot":false,"ymin":"0","ymax":"100","removeOlder":"1","removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":2,"x":620,"y":1800,"wires":[[],[]],"inputLabels":["{{msg.payload.ups_load}}"]},{"id":"ad0cc3ac.55655","type":"ui_chart","z":"7e596646.ff51a8","name":"","group":"9186db63.3d1d58","order":0,"width":0,"height":0,"label":"Input (V)","chartType":"line","legend":"false","xformat":"HH:mm","interpolate":"linear","nodata":"","dot":false,"ymin":"200","ymax":"240","removeOlder":"1","removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":2,"x":620,"y":1840,"wires":[[],[]],"inputLabels":["{{msg.payload.input_voltage}}"]},{"id":"8f7c4d2a.8fa94","type":"function","z":"7e596646.ff51a8","name":"Load","func":"msg.payload = Number(msg.payload.ups_load)\nreturn msg;","outputs":1,"noerr":0,"x":370,"y":1800,"wires":[["f659ef80.cff61"]]},{"id":"d5aa8c41.aab9a","type":"function","z":"7e596646.ff51a8","name":"input_voltage","func":"var Vbats = msg.payload.input_voltage;\nvar Vbat = Vbats.replace('_','.');\nmsg.payload = Number(Vbat);\nreturn msg;","outputs":1,"noerr":0,"x":390,"y":1840,"wires":[["ad0cc3ac.55655"]]},{"id":"8f63f3cd.e992f","type":"function","z":"7e596646.ff51a8","name":"Battery Charge","func":"var Vbats = msg.payload.battery_charge;\nvar Vbat = Vbats.replace('_','.');\nmsg.payload = Number(Vbat);\nreturn msg;","outputs":1,"noerr":0,"x":400,"y":1980,"wires":[["1b7ff6dc.a21d39"]]},{"id":"b3f0e576.3b72e8","type":"ui_gauge","z":"7e596646.ff51a8","name":"","group":"bbc40293.6e736","order":2,"width":0,"height":0,"gtype":"gage","title":"Battery Charge","label":"%","format":"{{msg.payload.battery_charge}}","min":0,"max":"100","colors":["#ff0000","#e6e600","#00ff40"],"seg1":"20","seg2":"80","x":400,"y":1940,"wires":[]},{"id":"1b7ff6dc.a21d39","type":"ui_chart","z":"7e596646.ff51a8","name":"","group":"bbc40293.6e736","order":3,"width":0,"height":0,"label":"Charge (%)","chartType":"line","legend":"false","xformat":"HH:mm","interpolate":"linear","nodata":"","dot":false,"ymin":"0","ymax":"100","removeOlder":"1","removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":2,"x":630,"y":1980,"wires":[[],[]]},{"id":"c348816f.5a7c3","type":"debug","z":"7e596646.ff51a8","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":140,"y":1840,"wires":[]},{"id":"1cb3fb28.b27d35","type":"function","z":"7e596646.ff51a8","name":"Battery runtime (min)","func":"var Vbats = msg.payload.battery_runtime;\nvar Vbat = Vbats.replace('_','.');\nmsg.payload = Number(Vbat)/60;\nreturn msg;","outputs":1,"noerr":0,"x":420,"y":2020,"wires":[["308a8cc8.dd5814"]]},{"id":"308a8cc8.dd5814","type":"ui_gauge","z":"7e596646.ff51a8","name":"","group":"bbc40293.6e736","order":1,"width":"0","height":"0","gtype":"wave","title":"Battery Runtime","label":"minutes","format":"{{value}}","min":0,"max":"100","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":640,"y":2020,"wires":[]},{"id":"7060b230.f8d0fc","type":"ui_chart","z":"7e596646.ff51a8","name":"","group":"9186db63.3d1d58","order":0,"width":0,"height":0,"label":"Battery (V)","chartType":"line","legend":"false","xformat":"HH:mm","interpolate":"linear","nodata":"","dot":false,"ymin":"0","ymax":"15","removeOlder":"1","removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":2,"x":630,"y":2080,"wires":[[],[]],"inputLabels":["{{msg.payload.input_voltage}}"]},{"id":"2cbac483.c557ac","type":"function","z":"7e596646.ff51a8","name":"battery_voltage","func":"var Vbats = msg.payload.battery_voltage;\nvar Vbat = Vbats.replace('_','.');\nmsg.payload = Number(Vbat);\nreturn msg;","outputs":1,"noerr":0,"x":400,"y":2080,"wires":[["7060b230.f8d0fc"]]},{"id":"1079ed21.7a6083","type":"function","z":"7e596646.ff51a8","name":"output_voltage","func":"var Vbats = msg.payload.output_voltage;\nvar Vbat = Vbats.replace('_','.');\nmsg.payload = Number(Vbat);\nreturn msg;","outputs":1,"noerr":0,"x":400,"y":1900,"wires":[["1bdbfd5a.8482d3"]]},{"id":"1bdbfd5a.8482d3","type":"ui_chart","z":"7e596646.ff51a8","name":"","group":"9186db63.3d1d58","order":0,"width":0,"height":0,"label":"Output (V)","chartType":"line","legend":"false","xformat":"HH:mm","interpolate":"linear","nodata":"","dot":false,"ymin":"200","ymax":"240","removeOlder":"1","removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"outputs":2,"x":630,"y":1900,"wires":[[],[]],"inputLabels":["{{msg.payload.input_voltage}}"]},{"id":"65092d79.135e54","type":"ui_text","z":"7e596646.ff51a8","group":"1486bc1b.577fd4","order":1,"width":0,"height":0,"name":"","label":"UPS Status","format":"{{msg.payload.ups_status}}","layout":"row-spread","x":390,"y":1680,"wires":[]},{"id":"945791d.10fd77","type":"smooth","z":"8de34dec.0311b","name":"50 periods mean","property":"payload","action":"mean","count":"50","round":"","mult":"single","x":510,"y":100,"wires":[["2b62390.9e37fc8"]]},{"id":"2b62390.9e37fc8","type":"function","z":"8de34dec.0311b","name":">50","func":"if (parseInt(msg.payload) > 50) {\n    return msg\n}\n","outputs":1,"noerr":0,"x":690,"y":100,"wires":[["9cb7ebe.5f9e618"]]},{"id":"7dccba1.776e744","type":"http request","z":"7e596646.ff51a8","name":"Nodered SSH key","method":"GET","ret":"txt","paytoqs":false,"url":"http://192.168.0.4:5000/api/ID?uid=nodered","tls":"","proxy":"","x":330,"y":180,"wires":[["f3f6f9dd.9437c8"]]},{"id":"1c10d80.8ca5b28","type":"inject","z":"7e596646.ff51a8","name":"","topic":"init","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"onceDelay":0.1,"x":120,"y":180,"wires":[["7dccba1.776e744"]]},{"id":"cc70cd74.e50af","type":"function","z":"7e596646.ff51a8","name":"key to context","func":"msg.payload = JSON.parse(msg.payload);\nif (msg.payload.status === 200){\n    flow.set('publicKey', msg.payload.username);\n    flow.set('privateKey', msg.payload.password);\n}\nreturn;","outputs":1,"noerr":0,"x":540,"y":60,"wires":[[]]},{"id":"cd943e50.c91e6","type":"file","z":"7e596646.ff51a8","name":"id_rsa","filename":"/root/.ssh/id_rsa","appendNewline":false,"createDir":true,"overwriteFile":"true","encoding":"none","x":770,"y":180,"wires":[["de8d9a1a.72a8b8"]]},{"id":"48ecf5e.252b30c","type":"debug","z":"7e596646.ff51a8","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":630,"y":2220,"wires":[]},{"id":"de8d9a1a.72a8b8","type":"exec","z":"7e596646.ff51a8","command":"chmod 0600 /root/.ssh/id_rsa","addpay":false,"append":"","useSpawn":"false","timer":"","oldrc":false,"name":"","x":980,"y":180,"wires":[[],[],[]]}]